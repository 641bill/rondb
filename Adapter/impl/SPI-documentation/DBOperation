/* A DBOperation object represents a database operation. 
   It contains read-only user-visible fields.
   
   OBJECT DEFINITIONS:
*/

var   DBOperation,          // DBOperation structure prototype
      OperationCodes,       // Array of defined opcodes
      OperationStates,      // Array of defined operation states
      LockModes,            // Array of defined lock modes
      DBResult,             // DBResult structure prototype
      DBOperationError;     // DBOperationError structure prototype


DBOperation = {
  opcode          : ""    ,  // the OperationCode
  transaction     : {}    ,  // pointer to the operation's transaction
  keys            : {}    ,  // array or map containing key fields
  values          : {}    ,  // array or map containing row values
  tableHandler    : {}    ,  // the DBTableHandler used for this operation
  lockMode        : ""    ,  // LockMode used for a read operation
  index           : {}    ,  // the IndexMetadata used for this operation
  state           : ""    ,  // the current OperationState
  result          : {}    ,  // DBResult object containing the result of the op
  buffers         : {}    ,  // contains any buffers used internally
};


OperationCodes = [
  "read",
  "insert",
  "update",
  "write",
  "delete"
];


OperationStates = [ 
  "INITIALIZED",         // State of a newly-created operation
  "DEFINED",             // opcode, table, and required keys/values are present
  "PLANNED",             // access path has been chosen
  "NO_INDEX",            // no index access path is available for this operation
  "CANCELLED",           // transaction was rolled back before operation started
  "PREPARED",            // local preparation of the operation is complete
  "EXECUTING",           // operation has been sent to database
  "COMPLETED"            // operation is complete and result is available
];   


/* All LockModes may not be implemented by all adapters.
   The LockMode in the DBOperation reflects the actual supported LockMode in use 
   for the operation.
*/   
LockModes = [ 
  "EXCLUSIVE",           // Read with an exclusive lock
  "SHARED",              // Read with a shared-read lock
  "SHARED_RELEASED",     // Read with a shared-read lock and release immediately  
  "COMMITTED"            // Read committed values (no locking)
];


DBResult = { 
  success        : true  ,   // boolean indicating whether the operation succeeded
  error          : {}    ,   // a DBOperationError object  
  row_count      : 0     ,   // number of rows read
  value          : {}    ,   // Result value created according to the DBTableHandler
  insert_id      : 0     ,   // value of AUTO-INCREMENT key on insert
};


DBOperationError = {
  code           : 0    // MySQL Error Code number (Required)
  /* ...  Other adapter-specific properties which may be present */
};


exports.DBOperation = DBOperation;
exports.OperationCodes = OperationCodes;
exports.OperationStates = OperationStates;
exports.LockModes = LockModes;
exports.DBOperationError = DBOperationError;

