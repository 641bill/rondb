/* DBSession
   Represents a single user's session (e.g., a single HTTP request).
   METHODS:
      getDataDictinary()
      read(table, keys)
      insert(table, row)
      update(table, keys, row)
      write(table, row)
      delete(table, keys)
      openTransaction()
*/


/*  DBDictionary getDataDictionary(); 
    IMMEDIATE
    Get data dictionary.
    
    RETURNS the DBDictionary object associated with the parent DBConnectionPool.
*/
  getDataDictionary();


/*  DBOperation read(DBTableHandler table, Object ResolvedKeys)
    IMMEDIATE
    Define an operation which when executed will fetch a row
   
    RETURNS a DBOperation structure
*/
  read(tableHandler, keys);


/* DBOperation insert(DBTableHandler table, Array row)
   IMMEDIATE
   Define an operation which when executed will insert a row
 
   RETURNS a DBOperation structure
*/
  insert(tableHandler, row);


/* DBOperation update(DBTableHandler table, Array key, Array row)
   IMMEDIATE
   Define an operation which when executed will update a row
  
   RETURNS a DBOperation structure
*/
  update(tableHandler, keys, row);


/* DBOperation write(DBTableHandler table, Array key, Array row)
   IMMEDIATE
   Define an operation which when executed will update or insert
 
   RETURNS a DBOperation structure
*/
  write(tableHandler, keys, row);


/* DBOperation delete(DBTableHandler table, Array primaryKey)
   IMMEDIATE 
   Define an operation which when executed will delete a row
 
   RETURNS a DBOperation structure
*/  
  delete(tableHandler, keys);


/* DBTransactionHandler openTransaction()
   IMMEDIATE

   This is a deffered operation. 
   An actual transaction begins with a "BEGIN WORK" SQL statement (mysql)
   or an Ndb::startTransaction() call (NDBAPI); those calls are deferred 
   until execute time.  

   RETURNS a DBTransactionHandler
*/
  openTransaction();


/* void setLockMode(LockMode lockmode)
  IMMEDIATE

  Set the lock mode for read operations. This will take effect immediately
  and will remain in effect until this session is closed or this method
  is called again.
*/
  setLockMode(mode)


/* close DBSession
   ASYNC, NO CALLBACK, EMITS 'close' EVENT ON COMPLETION
*/
  void close();

