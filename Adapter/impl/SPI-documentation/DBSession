/* DBSession
   Represents a single user's session (e.g., a single HTTP request).
   METHODS:
      getConnectionPool()
      read(table, keys)
      insert(table, row)
      update(table, keys, row)
      write(table, row)
      delete(table, keys)
      openTransaction()
      setLockMode()
      close()
*/

/*  getConnectionPool() 
    IMMEDIATE
    RETURNS the DBConnectionPool from which this DBSession was created.
*/
  getConnectionPool();


/* buildReadOperation(DBTableHandler table, Object ResolvedKeys)
   IMMEDIATE
   Define an operation which when executed will fetch a row

   RETURNS a DBOperation 
*/
  buildReadOperation(tableHandler, keys);


/* buildInsertOperation(DBTableHandler table, Object row)
   IMMEDIATE
   Define an operation which when executed will insert a row
 
   RETURNS a DBOperation 
*/
  buildInsertOperation(tableHandler, row);


/* buildUpdateOperation(DBTableHandler table, Object key, Object row)
   IMMEDIATE
   Define an operation which when executed will update a row
  
   RETURNS a DBOperation 
*/
  buildUpdateOperation(tableHandler, keys, row);


/* buildWriteOperation(DBTableHandler table, Object key, Object row)
   IMMEDIATE
   Define an operation which when executed will update or insert
 
   RETURNS a DBOperation 
*/
  buildWriteOperation(tableHandler, keys, row);


/* buildDeleteOperation(DBTableHandler table, Object primaryKey)
   IMMEDIATE 
   Define an operation which when executed will delete a row
 
   RETURNS a DBOperation 
*/  
  buildDeleteOperation(tableHandler, keys);


/* openTransaction()
   IMMEDIATE

   RETURNS a DBTransactionHandler
*/
  openTransaction();


/* void setLockMode(LockMode lockmode)
  IMMEDIATE

  Set the lock mode for read operations. This will take effect immediately
  and will remain in effect until this session is closed or this method
  is called again.
*/
  setLockMode(mode)


/* close DBSession
   ASYNC, NO CALLBACK, EMITS 'close' EVENT ON COMPLETION
*/
  close();

