/* DBSession
   Represents a single user's session (e.g., a single HTTP request).
   METHODS:
      getConnectionPool()
      read(table, keys)
      insert(table, row)
      update(table, keys, row)
      write(table, row)
      delete(table, keys)
      createTransaction()
      setLockMode()
      close()
*/

/*  getConnectionPool() 
    IMMEDIATE
    RETURNS the DBConnectionPool from which this DBSession was created.
*/
  getConnectionPool();


/* buildReadOperation(DBTableHandler table, 
                      Object ResolvedKeys,
                      DBTransactionHandler transaction,
                      function(error, DBOperation) userCallback)
   IMMEDIATE
   Define an operation which when executed will fetch a row.
   The userCallback is stored in the DBOperation, but will not be called 
   by this layer.

   RETURNS a DBOperation 
*/
  buildReadOperation(tableHandler, keys, transaction, callback);


/* buildInsertOperation(DBTableHandler table, Object row,
                        DBTransactionHandler transaction,
                        function(error, DBOperation) userCallback)
   IMMEDIATE
   Define an operation which when executed will insert a row.
   The userCallback is stored in the DBOperation, but will not be called 
   by this layer.
 
   RETURNS a DBOperation 
*/
  buildInsertOperation(tableHandler, row, transaction, callback);


/* buildUpdateOperation(DBTableHandler table, Object key, Object row,
                        DBTransactionHandler transaction,
                        function(error, DBOperation) userCallback)
   IMMEDIATE
   Define an operation which when executed will update a row
   The userCallback is stored in the DBOperation, but will not be called 
   by this layer.
  
   RETURNS a DBOperation 
*/
  buildUpdateOperation(tableHandler, keys, row, transaction, callback);


/* buildWriteOperation(DBTableHandler table, Object key, Object row,
                       DBTransactionHandler transaction,
                       function(error, DBOperation) userCallback)
   IMMEDIATE
   Define an operation which when executed will update or insert
   The userCallback is stored in the DBOperation, but will not be called 
   by this layer.
 
   RETURNS a DBOperation 
*/
  buildWriteOperation(tableHandler, keys, row, transaction, callback);


/* buildDeleteOperation(DBTableHandler table, Object primaryKey,
                        DBTransactionHandler transaction,
                        function(error, DBOperation) userCallback)
   IMMEDIATE 
   Define an operation which when executed will delete a row
   The userCallback is stored in the DBOperation, but will not be called 
   by this layer.
 
   RETURNS a DBOperation 
*/  
  buildDeleteOperation(tableHandler, keys, transaction, callback);


/* createTransaction()
   IMMEDIATE

   RETURNS a DBTransactionHandler
*/
  createTransaction();


/* void setLockMode(LockMode lockmode)
  IMMEDIATE

  Set the lock mode for read operations. This will take effect immediately
  and will remain in effect until this session is closed or this method
  is called again.
*/
  setLockMode(mode)


/* close DBSession
   ASYNC, NO CALLBACK, EMITS 'close' EVENT ON COMPLETION
*/
  close();

