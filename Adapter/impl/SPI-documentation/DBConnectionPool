/* DBConnectionPool
   DBConnectionPool specifies a common SPI for a database connection.

   Each implementation is expected to require impl-specific properties 
   in the constructor.

   METHODS: 
     connect(callback)
     connectSync()
     isConnected()
     close()
     destroy()
     getDBSession()
     getDataDictionary()
     createDBTableHandler()
*/


/* DBConnectionPool constructor.
   IMMEDIATE.
   Does not perform any IO. 
   Throws an exception if the Properties object is invalid.
*/   
DBConnectionPool(Properties connectionProperties); 


/* connect(function(error, DBConnectionPool) callback)
   ASYNC. 
   Connect to the database, using the properties supplied in the constructor.
*/
   connect(callback);


/* DBConnectionPool.connectSync() method.
   SYNC.
   Blocking connect.  
   This is a convenience method for code startup.

   @return true on success and false on error.
*/
   connectSync();


/* DBConnectionPool.isConnected() method.
   IMMEDIATE.

   @return bool true/false
*/
   isConnected();


/* DBConnectionPool.close() method.
   ASYNC.
   On successful close, the connection object is passed to the callback.
   It can subsequently be either reopened or destroyed.
*/
   close(function(error, DBConnectionPool) callback); 


/* DBConnectionPool.closeSync() method.
   SYNC.
   Wait for the connection to close, and destroy the DBConnectionPool object.
   This is a convenience method for code shutdown.
   Returns null.
*/
  closeSync();


/* DBConnectionPool.destroy() method.
   IMMEDIATE. 
   Frees any native code resources associated with the connection, so that 
   the DBConnectionPool object can safely be freed by the garbage collector.
   
   Returns true on success and false on error.
   It is an error if the DBConnectionPool is not closed.
*/
   destroy();


/* getDBSession().
   ASYNC.
   Creates and opens a new DBSession.
*/
   getDBSession(function(error, DBSession) callback);


/* listTables(databaseName, callback(error, array))
   ASYNC
   List all tables in the schema   
*/
  listTables(databaseName, callback);

    
/* getTable(databaseName, tableName, callback(error, DBTable));
   ASYNC
   Fetch metadata for a table
*/
  getTable(databaseName, tableName, callback);


/* createDBTableHandler(dbTable, apiMapping)
   IMMEDIATE
   Creates and returns a DBTableHandler for table and mapping
*/
  createDBTableHandler(dbTable, apiMapping);


/* registerTypeConverter 
   IMMEDIATE
   Register a converter for a SQL data type 
 
   @param type is as defined in DBDictionary for the storage SPI
*/
  registerTypeConverter(string typeName, Converter c);


/* registerCharsetConverter
   IMMEDIATE
   Register a converter to/from Javascript String for a SQL charset
*/
  registerCharsetConverter(String charsetName, Converter c);
  

/* getConverter 
   IMMEDIATE
   Fetch the converter for a column
*/
   getConverter(dbColumn);  