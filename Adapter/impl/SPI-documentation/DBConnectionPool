/* DBConnectionPool
   DBConnectionPool specifies a common SPI for a database connection.

   Each implementation is expected to require impl-specific properties 
   in the constructor.

   METHODS: 
     connect(callback)
     connectSync()
     isConnected()
     close()
     destroy()
     getDBSession()
     getDataDictionary()
     createDBTableHandler()
*/


/* DBConnectionPool constructor.
   IMMEDIATE.
   Does not perform any IO. 
   Throws an exception if the Properties object is invalid.
*/   
DBConnectionPool(Properties connectionProperties); 


/* connect(function(error, DBConnectionPool) callback)
   ASYNC. 
   Connect to the database, using the properties supplied in the constructor.
*/
   connect(callback);


/* DBConnectionPool.connectSync() method.
   SYNC.
   Blocking connect.  
   This is a convenience method for code startup.

   Returns true on success and false on error.
*/
   connectSync();


/* DBConnectionPool.isConnected() method.
   IMMEDIATE.

   Returns bool true/false
*/
   isConnected();


/* DBConnectionPool.close() method.
   ASYNC.
   On successful close, the connection object is passed to the callback.
   It can subsequently be either reopened or destroyed.
*/
   close(function(error, DBConnectionPool) callback); 


/* DBConnectionPool.closeSync() method.
   SYNC.
   Wait for the connection to close, and destroy the DBConnectionPool object.
   This is a convenience method for code shutdown.
   Returns null.
*/
  closeSync();


/* DBConnectionPool.destroy() method.
   IMMEDIATE. 
   Frees any native code resources associated with the connection, so that 
   the DBConnectionPool object can safely be freed by the garbage collector.
   
   Returns true on success and false on error.
   It is an error if the DBConnectionPool is not closed.
*/
   destroy();


/* getDBSession().
   ASYNC.
   Creates and opens a new DBSession.
*/
   getDBSession(function(error, DBSession) callback);


/* listTables(databaseName, callback(error, array))
   ASYNC
   List all tables in the schema.
   If dbSession is non-null, it will be used as the session for the metadata 
   calls.  If null, DBConnectionPool will use some pooled session.
   Returns an array of table names.
*/
  listTables(dbSession, databaseName, callback);

    
/* getTableMetadata(dbSession, databaseName, tableName, callback(error, DBTable));
   ASYNC
   Fetch metadata for a table, using dbSession (which may be null)
*/
  getTableMetadata(dbSession, databaseName, tableName, callback);


/* createDBTableHandler(tableMetadata, apiMapping)
   IMMEDIATE
   Creates and returns a DBTableHandler for table and mapping
*/
  createDBTableHandler(tableMetadata, apiMapping);


/* registerTypeConverter 
   IMMEDIATE
   Register a converter for a SQL data type 
 
   @param type is as defined in DBDictionary for the storage SPI
*/
  registerTypeConverter(typeName, converterObject);
