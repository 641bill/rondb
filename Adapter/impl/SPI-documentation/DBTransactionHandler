/* DBTransactionHandler represents a database transaction.
   METHODS:
     setPartitionKey(tableHandler, partitionKey)
     execute(execMode, callback)
     close()
        
  OBJECT DEFINITIONS:
     DBTransactionHandler
     DBTransactionStates
*/

var DBTransactionHandler; // Standard members of DBTransactionHandler object


DBTransactionHandler = { 
  dbSession          : null,  // DBSession link for this transaction
  state              : null,  // DBTransactionState applying to the transaction
  success            : null,  // Boolean inidcating success with no errors
  error              : null,  // DBOperationError applying to the transaction
  userCallback       : null,  // A higher-level callback function 
  executedOperations : null,  // List of dbOperations already executed
};


DBTransactionStates = [ 
  "DEFINED",      // No operations have been executed
  "STARTED",      // Operations have been executed but not committed
  "COMMITTED",    // Transaction has been committed
  "ROLLEDBACK",   // Transaction has been rolled back
  "CLOSED"        // Transaction has completed and been closed
];   


/* setPartitionKey(TableHandler Table, Array partitionKey)
  IMMEDIATE
  
  In NDB, setting the partition key causes the NDB API to select a 
  Transaction Coordinator on the node that would be the primary node
  for a row with that key.
*/
  function setPartitionKey(tableHandler, partitionKey) {}


/* execute(DBOperation[] dbOperationList,
           function(error, DBTransactionHandler) callback)
   ASYNC
   
   Executes the DBOperations in dbOperationList, without commiting.
*/
  function execute(dbOperationList, callback) {}


/* executeCommit(DBOperation[] dbOperationList,
                 function(error, DBTransactionHandler) callback)
   ASYNC
   
   Executes the DBOperations in dbOperationList and commit the transaction.
*/
  function executeCommit(dbOperationList, callback) {}


/* commit(function(error, DBTransactionHandler) callback)
   ASYNC 
   
   Commit work.
*/
  function commit(callback) {}


/* rollback(function(error, DBTransactionHandler) callback)
   ASYNC 
   
   Roll back all previously executed operations.
*/
  function rollback(callback) {}


/* close(callback)
   ASYNC

   Close and free all resources. 
   Callback is optional; if supplied, will receive (err).
 */
  function close(callback) {}



/* This documentation file is a valid JavaScript module and exports: 
*/
exports.DBTransactionHandler =  DBTransactionHandler;
exports.DBTransactionStates  =  DBTransactionStates;

