/* 
   A DBTableHandler is a persistent metadata object that combines table 
   information from the data dictionary with user-supplied information about 
   column selection, column name mapping, and data conversion handlers.

*/

/* Related objects:

   DBTable:       as defined in spi/DBDictionary spec.
   TableMapping:  as defined in api/Annotations spec.
   FieldMapping:  as defined in api/Annotations spec.
*/


/* DBTableHandler() constructor
   IMMEDIATE

   Create a DBTableHandler for a table and a mapping.

   The DBTable may not be null.

   If the TableMapping is null, default mapping behavior will be used.
   Default mapping behavior is to:
     select all columns when reading
     use default converters for all data types
     perform no remapping between field names and column names
*/
  DBTableHandler(DBTable, TableMapping);


/************************************************
   Methods for defining DBTableHandler behavior 
 ************************************************/
  /** registerFieldConverter
   * IMMEDIATE
   * Register a converter for a field in a domain object
   *
   */
  registerFieldConverter(Object token_object, String field_name, Converter c);

  /** registerColumnConverter
   * IMMEDIATE
   * Register a converter for a column in a table
   *
   */
  registerColumnConverter(String table, String column, Converter c);

  /** registerTypeConverter 
   *  IMMEDIATE
   *  Register a converter for a SQL data type 
   *
   *  @param type is as defined in DBDictionary for the storage SPI
   */
  registerTypeConverter(string typeName, Converter c);

  /** registerCharsetConverter
   *  IMMEDIATE
   *  Register a converter to/from Javascript String for a SQL charset
   */
  registerCharsetConverter(String charsetName, Converter c);
}   

/* DBTableHandler.setResultRowPrototype(Object proto_object)
   IMMEDIATE

   Declare that proto_object should be used as a prototype 
   when creating a results object for a row read from the database.
*/
  setResultPrototype(proto_object);


/************************************************
      Methods for working with mapped objects 
 ************************************************/

/* Returns the number of fields mapped to columns in the table 
*/
getMappedFieldCount();

/* Boolean: returns True if all columns are mapped
*/
allColumnsMapped();

/* Returns an array in which each element is the column number of
   a mapped column
*/
getMappedColumnNumbers();





/* Given a DBOoperation and an object containing keys,
   return  


