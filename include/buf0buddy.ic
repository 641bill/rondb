/******************************************************
Binary buddy allocator for compressed pages

(c) 2006 Innobase Oy

Created December 2006 by Marko Makela
*******************************************************/

#ifdef UNIV_MATERIALIZE
# undef UNIV_INLINE
# define UNIV_INLINE
#endif

#include "buf0buf.h"
#include "buf0buddy.h"
#include "ut0ut.h"
#include "sync0sync.h"

/**************************************************************************
Allocate a block.  The thread calling this function must hold
buf_pool->mutex and must not hold buf_pool->zip_mutex or any block->mutex.
The buf_pool->mutex may only be released and reacquired if
lru == BUF_BUDDY_USE_LRU. */

void*
buf_buddy_alloc_low(
/*================*/
			/* out: allocated block,
			possibly NULL if lru==NULL */
	ulint	i,	/* in: index of buf_pool->zip_free[],
			or BUF_BUDDY_SIZES */
	ibool*	lru)	/* in: pointer to a variable that will be assigned
			TRUE if storage was allocated from the LRU list
			and buf_pool->mutex was temporarily released,
			or NULL if the LRU list should not be used */
	__attribute__((malloc));

/**************************************************************************
Deallocate a block. */

void
buf_buddy_free_low(
/*===============*/
	void*	buf,	/* in: block to be freed, must not be
			pointed to by the buffer pool */
	ulint	i)	/* in: index of buf_pool->zip_free[],
			or BUF_BUDDY_SIZES */
	__attribute__((nonnull));

/**************************************************************************
Get the index of buf_pool->zip_free[] for a given block size. */
UNIV_INLINE
ulint
buf_buddy_get_slot(
/*===============*/
			/* out: index of buf_pool->zip_free[],
			or BUF_BUDDY_SIZES */
	ulint	size)	/* in: block size */
{
	ulint	i;
	ulint	s;

	for (i = 0, s = BUF_BUDDY_LOW; s < size; i++, s <<= 1);

	ut_ad(i <= BUF_BUDDY_SIZES);
	return(i);
}

/**************************************************************************
Allocate a block.  The thread calling this function must hold
buf_pool->mutex and must not hold buf_pool->zip_mutex or any block->mutex.
The buf_pool->mutex may only be released and reacquired if
lru == BUF_BUDDY_USE_LRU. */
UNIV_INLINE
void*
buf_buddy_alloc(
/*============*/
			/* out: allocated block,
			possibly NULL if lru == NULL */
	ulint	size,	/* in: block size, up to UNIV_PAGE_SIZE */
	ibool*	lru)	/* in: pointer to a variable that will be assigned
			TRUE if storage was allocated from the LRU list
			and buf_pool->mutex was temporarily released,
			or NULL if the LRU list should not be used */
{
	ut_ad(mutex_own(&buf_pool->mutex));

	return(buf_buddy_alloc_low(buf_buddy_get_slot(size), lru));
}

/**************************************************************************
Deallocate a block. */
UNIV_INLINE
void
buf_buddy_free(
/*===========*/
	void*	buf,	/* in: block to be freed, must not be
			pointed to by the buffer pool */
	ulint	size)	/* in: block size, up to UNIV_PAGE_SIZE */
{
	ut_ad(mutex_own(&buf_pool->mutex));

	buf_buddy_free_low(buf, buf_buddy_get_slot(size));
}

#ifdef UNIV_MATERIALIZE
# undef UNIV_INLINE
# define UNIV_INLINE	UNIV_INLINE_ORIGINAL
#endif
