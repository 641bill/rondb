-- source include/have_ndb.inc
-- source suite/ndb/include/backup_restore_setup.inc

# Store initial counts of both detected and synchronized objects
--let $current_changes_detected = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_detected_count', Value, 1)
--let $current_changes_synced = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_synced_count', Value, 1)
# Turn auto sync on with a low interval so changes are detected quickly
SET @old_ndb_metadata_check = @@global.ndb_metadata_check;
SET @old_ndb_metadata_check_interval = @@global.ndb_metadata_check_interval;
SET GLOBAL ndb_metadata_check = true;
SET GLOBAL ndb_metadata_check_interval = 5;

--exec $NDB_RESTORE -b 1 -n 1 -p 1 -m -r $NDB_SAVED_BACKUPS/51_dd >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -e -b 1 -n 2 -p 1 -r $NDB_SAVED_BACKUPS/51_dd >> $NDB_TOOLS_OUTPUT

--disable_query_log
call mtr.add_suppression("NDB: Table upgrade required");
call mtr.add_suppression("NDB: Table definition contains obsolete data types");
call mtr.add_suppression("NDB: Failed to migrate table");
--enable_query_log

--let $initial_detected_count = $current_changes_detected
--let $changes_detected = 0
--let $expected_changes_detected = 3
--let $max_wait = 30
# Wait until the following 3 object changes are detected:
# Logfile group 'lg'
# Tablespace 'ts'
# Table 'test.t1'
while ($changes_detected < $expected_changes_detected)
{
  --sleep 1
  --dec $max_wait
  if ($max_wait == 0)
  {
    --echo $changes_detected changes detected when $expected_changes_detected changes were expected
    --die Timed out waiting for metadata changes to be detected
  }
  --let $current_changes_detected = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_detected_count', Value, 1)
  --expr $changes_detected = $current_changes_detected - $initial_detected_count
}

# Wait until the changes detected have been synced
--let $initial_synced_count = $current_changes_synced
--let $changes_synced = 0
--let $max_wait = 30
while ($changes_synced < $expected_changes_detected)
{
  --sleep 1
  --dec $max_wait
  if ($max_wait == 0)
  {
    --echo $changes_synced changes synced when $expected_changes_detected changes synced were expected
    --die Timed out waiting for metadata changes to be synced
  }
  --let $current_changes_synced = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_synced_count', Value, 1)
  --expr $changes_synced = $current_changes_synced - $initial_synced_count
}

--error ER_NO_SUCH_TABLE
SHOW CREATE TABLE t1;
SHOW WARNINGS;

--exec $NDB_DROP_TABLE --no-defaults -d test t1 >> $NDB_TOOLS_OUTPUT

# Wait until the blacklist is empty
--let $blacklist_size = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_blacklist_size', Value, 1)
--let $max_wait = 30
while ($blacklist_size != 0)
{
  --sleep 1
  --dec $max_wait
  if ($max_wait == 0)
  {
    --echo Blacklist size = $blacklist_size when it should be 0
    --die Timed out waiting for blacklist entries to be removed
  }
  --let $blacklist_size = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_blacklist_size', Value, 1)
}

# Reset metadata check values
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check;
SET GLOBAL ndb_metadata_check_interval = @old_ndb_metadata_check_interval;

ALTER TABLESPACE ts
DROP DATAFILE 'datafile.dat';
DROP TABLESPACE ts;
DROP LOGFILE GROUP lg
  ENGINE NDB;
--remove_file $NDB_TOOLS_OUTPUT
