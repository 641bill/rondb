CREATE TABLE t1 (
a char(10) NOT NULL primary key,
b int,
c blob,
unique key (b)
) comment='NDB_TABLE=FULLY_REPLICATED=1' ENGINE=ndbcluster;
use ndbinfo;
select tab_partitions, tab_fragments from table_distribution_status as tds join dict_obj_info as doi where tds.table_id = doi.id and doi.fq_name = 'test/def/t1';
tab_partitions	tab_fragments
4	4
select partition_id, fragment_id, partition_order, log_part_id, preferred_primary from table_fragments as tf join dict_obj_info as doi where tf.table_id = doi.id and doi.fq_name = 'test/def/t1';
partition_id	fragment_id	partition_order	log_part_id	preferred_primary
0	0	0	0	1
1	1	0	1	2
2	2	0	2	1
3	3	0	3	2
select fragment_id, replica_node_id from table_replicas as tr join dict_obj_info as doi where tr.table_id = doi.id and doi.fq_name = 'test/def/t1';
fragment_id	replica_node_id
0	1
0	2
1	2
1	1
2	1
2	2
3	2
3	1
select read_backup, fully_replicated from table_info as ti join dict_obj_info as doi where ti.table_id = doi.id and doi.fq_name = 'test/def/t1';
read_backup	fully_replicated
1	1
use test;
insert into t1 values
('1',1,REPEAT('1',3000)), ('2',2,REPEAT('2',3000)), ('3',3,REPEAT('3',3000)),
('4',4,REPEAT('4',3000)), ('5',5,REPEAT('5',3000)), ('6',6,REPEAT('6',3000)),
('7',7,REPEAT('7',3000)), ('8',8,REPEAT('8',3000));
create temporary table counters_at_startup
select counter_name, sum(val) as val
from ndbinfo.counters
group by counter_name;
select a,b,LENGTH(c) from t1 where a = '1';
a	b	LENGTH(c)
1	1	3000
select a,b,LENGTH(c) from t1 where a = '2';
a	b	LENGTH(c)
2	2	3000
select a,b,LENGTH(c) from t1 where a = '3';
a	b	LENGTH(c)
3	3	3000
select a,b,LENGTH(c) from t1 where a = '4';
a	b	LENGTH(c)
4	4	3000
select a,b,LENGTH(c) from t1 where a = '5';
a	b	LENGTH(c)
5	5	3000
select a,b,LENGTH(c) from t1 where a = '6';
a	b	LENGTH(c)
6	6	3000
select a,b,LENGTH(c) from t1 where a = '7';
a	b	LENGTH(c)
7	7	3000
select a,b,LENGTH(c) from t1 where a = '8';
a	b	LENGTH(c)
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('1', '2', '3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
1	1	3000
2	2	3000
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('2', '3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
2	2	3000
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('4', '5', '6', '7', '8');
a	b	LENGTH(c)
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('5', '6', '7', '8');
a	b	LENGTH(c)
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('6', '7', '8');
a	b	LENGTH(c)
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('7', '8');
a	b	LENGTH(c)
7	7	3000
8	8	3000
select s1.counter_name, s2.val - s1.val as diff
from counters_at_startup s1,
(select counter_name, sum(val) as val
from ndbinfo.counters
group by counter_name) s2
where s1.counter_name = s2.counter_name
and ( s1.counter_name = 'LOCAL_READS' or s1.counter_name = 'READS' )
order by 1;
counter_name	diff
LOCAL_READS	131
READS	131
drop table counters_at_startup;
row
-- t1 --
Table options: readbackup, fullyreplicated
-- Attributes --
-- NDB$BLOB_#_# --
Table options: readbackup, fullyreplicated
-- Attributes --
Creating nodegroup
alter table t1 algorithm=inplace, reorganize partition;
use ndbinfo;
select tab_partitions, tab_fragments from table_distribution_status as tds join dict_obj_info as doi where tds.table_id = doi.id and doi.fq_name = 'test/def/t1';
tab_partitions	tab_fragments
4	8
select partition_id, fragment_id, log_part_id, preferred_primary from table_fragments as tf join dict_obj_info as doi where tf.table_id = doi.id and doi.fq_name = 'test/def/t1';
partition_id	fragment_id	log_part_id	preferred_primary
0	0	0	1
1	1	1	2
2	2	2	1
3	3	3	2
0	4	0	3
1	5	1	4
2	6	2	3
3	7	3	4
select fragment_id, replica_node_id from table_replicas as tr join dict_obj_info as doi where tr.table_id = doi.id and doi.fq_name = 'test/def/t1';
fragment_id	replica_node_id
0	1
0	2
1	2
1	1
2	1
2	2
3	2
3	1
4	3
4	4
5	4
5	3
6	3
6	4
7	4
7	3
use test;
set global ndb_data_node_neighbour = 1;
create table c as select node_id, fragment_num, tot_frag_scans
from `ndbinfo`.`operations_per_fragment`
  where fq_name = 'test/def/t1';
select count(*) from t1;
count(*)
8
select distinct o.node_id
from `ndbinfo`.`operations_per_fragment` o join c
on o.node_id = c.node_id and o.fragment_num = c.fragment_num
where fq_name = 'test/def/t1' and o.tot_frag_scans > c.tot_frag_scans;
node_id
1
drop table c;
set global ndb_data_node_neighbour = 2;
create table c as select node_id, fragment_num, tot_frag_scans
from `ndbinfo`.`operations_per_fragment`
  where fq_name = 'test/def/t1';
select count(*) from t1;
count(*)
8
select distinct o.node_id
from `ndbinfo`.`operations_per_fragment` o join c
on o.node_id = c.node_id and o.fragment_num = c.fragment_num
where fq_name = 'test/def/t1' and o.tot_frag_scans > c.tot_frag_scans;
node_id
2
drop table c;
set global ndb_data_node_neighbour = 3;
create table c as select node_id, fragment_num, tot_frag_scans
from `ndbinfo`.`operations_per_fragment`
  where fq_name = 'test/def/t1';
select a,b,LENGTH(c) from t1 where a = 1;
a	b	LENGTH(c)
1	1	3000
select distinct o.node_id
from `ndbinfo`.`operations_per_fragment` o join c
on o.node_id = c.node_id and o.fragment_num = c.fragment_num
where fq_name = 'test/def/t1' and o.tot_frag_scans > c.tot_frag_scans;
node_id
1
2
drop table c;
set global ndb_data_node_neighbour = 4;
create table c as select node_id, fragment_num, tot_frag_scans
from `ndbinfo`.`operations_per_fragment`
  where fq_name = 'test/def/t1';
select a,b,LENGTH(c) from t1;
a	b	LENGTH(c)
1	1	3000
2	2	3000
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select distinct o.node_id
from `ndbinfo`.`operations_per_fragment` o join c
on o.node_id = c.node_id and o.fragment_num = c.fragment_num
where fq_name = 'test/def/t1' and o.tot_frag_scans > c.tot_frag_scans;
node_id
1
2
drop table c;
set global ndb_data_node_neighbour = 0;
select node_id, fragment_num, fixed_elem_count > 0
from `ndbinfo`.`memory_per_fragment`
where fq_name = 'test/def/t1'
order by node_id, fragment_num;
node_id	fragment_num	fixed_elem_count > 0
1	0	1
1	1	1
1	2	1
1	3	1
2	0	1
2	1	1
2	2	1
2	3	1
3	4	1
3	5	1
3	6	1
3	7	1
4	4	1
4	5	1
4	6	1
4	7	1
create temporary table counters_at_startup
select counter_name, sum(val) as val
from ndbinfo.counters
group by counter_name;
select a,b,LENGTH(c) from t1 where a = '1';
a	b	LENGTH(c)
1	1	3000
select a,b,LENGTH(c) from t1 where a = '2';
a	b	LENGTH(c)
2	2	3000
select a,b,LENGTH(c) from t1 where a = '3';
a	b	LENGTH(c)
3	3	3000
select a,b,LENGTH(c) from t1 where a = '4';
a	b	LENGTH(c)
4	4	3000
select a,b,LENGTH(c) from t1 where a = '5';
a	b	LENGTH(c)
5	5	3000
select a,b,LENGTH(c) from t1 where a = '6';
a	b	LENGTH(c)
6	6	3000
select a,b,LENGTH(c) from t1 where a = '7';
a	b	LENGTH(c)
7	7	3000
select a,b,LENGTH(c) from t1 where a = '8';
a	b	LENGTH(c)
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('1', '2', '3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
1	1	3000
2	2	3000
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('2', '3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
2	2	3000
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('3', '4', '5', '6', '7', '8');
a	b	LENGTH(c)
3	3	3000
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('4', '5', '6', '7', '8');
a	b	LENGTH(c)
4	4	3000
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('5', '6', '7', '8');
a	b	LENGTH(c)
5	5	3000
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('6', '7', '8');
a	b	LENGTH(c)
6	6	3000
7	7	3000
8	8	3000
select a,b,LENGTH(c) from t1 where a in ('7', '8');
a	b	LENGTH(c)
7	7	3000
8	8	3000
select s1.counter_name, s2.val - s1.val as diff
from counters_at_startup s1,
(select counter_name, sum(val) as val
from ndbinfo.counters
group by counter_name) s2
where s1.counter_name = s2.counter_name
and ( s1.counter_name = 'LOCAL_READS' or s1.counter_name = 'READS' )
order by 1;
counter_name	diff
LOCAL_READS	129
READS	129
drop table counters_at_startup;
row
-- t1 --
Table options: readbackup, fullyreplicated
-- Attributes --
-- NDB$BLOB_#_# --
Table options: readbackup, fullyreplicated
-- Attributes --
Creating nodegroup
Creating nodegroup
alter table t1 algorithm=inplace, reorganize partition;
select node_id, fragment_num, fixed_elem_count > 0
from `ndbinfo`.`memory_per_fragment`
where fq_name = 'test/def/t1'
order by node_id, fragment_num;
node_id	fragment_num	fixed_elem_count > 0
1	0	1
1	1	1
1	2	1
1	3	1
2	0	1
2	1	1
2	2	1
2	3	1
3	4	1
3	5	1
3	6	1
3	7	1
4	4	1
4	5	1
4	6	1
4	7	1
5	8	1
5	10	1
5	12	1
5	14	1
6	8	1
6	10	1
6	12	1
6	14	1
7	9	1
7	11	1
7	13	1
7	15	1
8	9	1
8	11	1
8	13	1
8	15	1
drop table t1;
