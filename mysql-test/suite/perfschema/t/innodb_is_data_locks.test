--echo #Test for Intention Shared lock

-- connect (con1,localhost,root,,)
-- connect (con2,localhost,root,,)

--disable_warnings
drop table if exists t1_is;
--enable_warnings

--connection con1
use test;
create table t1_is (id integer, x integer, PRIMARY KEY (id)) engine=INNODB;
insert into t1_is values (0,0),(1,1);
SET autocommit=0;
select * from t1_is where id=0 lock in share mode;

--connection con2

#
# One one hand, for the innodb storage engine,
# the server returns the LOCK_DATA column using
# 'best effort', without guarantees.
# See in innodb:
# - Innodb_data_lock_iterator::scan_trx()
# - p_s_fill_lock_data()
# - buf_page_try_get()
#
# In short, if the page is in the buffer pool,
# LOCK_DATA for the record is returned.
# However, if the page is not in the buffer pool,
# the code just returns LOCK_DATA = NULL
# instead of re-loading the page from disk just
# to read LOCK_DATA.
#
# On the other hand, the point of this test
# is to inspect LOCK_DATA returned in the
# performance schema, to make sure the proper
# record lock is printed.

# Attempt to reload the buffer pool,
# to avoid spurious failures with LOCK_DATA = NULL
# in the test result file
# Note that a NULL is a valid result, not a failure.

select * from test.t1_is;

select object_schema, object_name, lock_type, lock_mode, lock_status, lock_data
  from performance_schema.data_locks
  where object_name="t1_is"
  order by lock_type, lock_mode, lock_status, lock_data;

--connection con1
unlock tables;
drop table t1_is;

--disconnect con1
--disconnect con2

