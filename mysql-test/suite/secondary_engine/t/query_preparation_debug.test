--source include/have_debug.inc
--source include/have_debug_sync.inc

# Supplemental test case for query repreparation. Test what happens if
# EXECUTE fails to open the secondary tables after PREPARE has
# successfully opened them, using a debug flag to inject an error in
# EXECUTE.

--disable_query_log
eval INSTALL PLUGIN MOCK SONAME '$MOCK_PLUGIN';
--enable_query_log

CREATE TABLE t(x INT) SECONDARY_ENGINE MOCK;
INSERT INTO t VALUES (1);
ALTER TABLE t SECONDARY_LOAD;

# First execute the statement without the debug flag. The statement
# should be executed on the secondary engine.
FLUSH STATUS;
PREPARE ps FROM 'SELECT * FROM t';
EXECUTE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';

# Now set the debug flag. Execution fails when opening the secondary
# tables. The failure triggers a repreparation against the primary
# storage engine.
FLUSH STATUS;
SET DEBUG = '+d,open_secondary_engine_tables_error';
EXECUTE ps;
SET DEBUG = '-d,open_secondary_engine_tables_error';
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';

# The statement remembers that the previous execution failed to open
# the secondary tables, so it will not attempt to use the secondary
# engine on re-execution.
FLUSH STATUS;
EXECUTE ps;
SHOW SESSION STATUS LIKE 'Secondary_engine_execution_count';

DROP TABLE t;

--echo #
--echo # WL#12389: Add interface for optimizing queries in secondary engines
--echo #

CREATE TABLE t1(x INT) SECONDARY_ENGINE MOCK;
INSERT INTO t1 VALUES (1), (2), (3);
CREATE TABLE t2(y INT) SECONDARY_ENGINE MOCK;
INSERT INTO t2 VALUES (3), (4), (5);
ALTER TABLE t1 SECONDARY_LOAD;
ALTER TABLE t2 SECONDARY_LOAD;
ANALYZE TABLE t1, t2;

# Verify that the secondary engine optimization was invoked by
# injecting an error in the secondary engine optimization. The error
# prevents the queries from being offloaded to the MOCK engine.
SET DEBUG = "+d,secondary_engine_mock_optimize_error";
EXPLAIN SELECT * FROM t1;
EXPLAIN SELECT (SELECT y FROM t2 WHERE y = 1) FROM t1;
EXPLAIN SELECT * FROM t1 UNION ALL SELECT * FROM t2;
EXPLAIN SELECT * FROM t1 UNION DISTINCT SELECT * FROM t2;
SET DEBUG = "-d,secondary_engine_mock_optimize_error";

# The same queries should use the MOCK engine if no error is injected.
EXPLAIN SELECT * FROM t1;
EXPLAIN SELECT (SELECT y FROM t2 WHERE y = 1) FROM t1;
EXPLAIN SELECT * FROM t1 UNION ALL SELECT * FROM t2;
EXPLAIN SELECT * FROM t1 UNION DISTINCT SELECT * FROM t2;

DROP TABLE t1, t2;

# A query that is killed during secondary engine optimization, should
# not be retried in the primary engine.
CREATE TABLE t(x int) SECONDARY_ENGINE MOCK;
INSERT INTO t VALUES (1), (2), (3);
ALTER TABLE t SECONDARY_LOAD;
SET DEBUG_SYNC = 'before_mock_optimize SIGNAL mock WAIT_FOR continue';
--send SELECT * FROM t
--connect(conn1,localhost,root,,)
SET DEBUG_SYNC = 'now WAIT_FOR mock';
SELECT ID FROM INFORMATION_SCHEMA.PROCESSLIST
       WHERE INFO = 'SELECT * FROM t' INTO @thread_id;
KILL QUERY @thread_id;
SET DEBUG_SYNC = 'now SIGNAL continue';
--connection default
--error ER_QUERY_INTERRUPTED
--reap
--disconnect conn1
DROP TABLE t;

--disable_query_log
UNINSTALL PLUGIN mock;
--enable_query_log
