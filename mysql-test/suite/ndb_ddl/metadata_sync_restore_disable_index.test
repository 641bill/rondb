--source include/have_ndb.inc
--source suite/ndb/include/backup_restore_setup.inc

#
# Check that tables restored with the --disable-indexes option are
# not automatically synchronized. Synchronization of such tables
# would lead to the wrong table definition being installed in the DD
# and would render the table unusable until the indexes were restored
# to NDB
#

# Create tables with various indexes
CREATE TABLE t1 (
  a INT PRIMARY KEY,
  b INT NOT NULL,
  c INT NOT NULL,
  UNIQUE ib(b),
  INDEX ic(c)
) ENGINE NDB;

INSERT INTO t1 VALUES (1,2,3),(2,3,5),(3,4,6),(4,5,8),(5,6,2),(6,7,2);

CREATE TABLE t2 (
  a INT,
  b VARCHAR(10)
) ENGINE NDB;

INSERT INTO t2 VALUES (1,'Number 4'),(2,'Privet'),(3,'Drive');

CREATE TABLE parent (
  c1 INT PRIMARY KEY
) ENGINE NDB;

INSERT INTO parent VALUES (1),(2);

CREATE TABLE child (
  c1 INT PRIMARY KEY,
  c2 INT,
  INDEX xc2(c2),
  FOREIGN KEY(c2)
    REFERENCES parent(c1)
    ON DELETE CASCADE
) ENGINE NDB;

INSERT INTO child VALUES (1,1),(2,2);

# Take a backup
--source include/ndb_backup.inc

DROP TABLE t1,t2,child,parent;

# Store initial counts of both detected and synchronized objects
--let $initial_detected_count = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_detected_count', Value, 1)
--let $initial_synced_count = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_synced_count', Value, 1)

# Restore metadata and data but do not rebuild indexes
--exec $NDB_RESTORE -b $the_backup_id -n 1 -m -r --disable-indexes $NDB_BACKUPS-$the_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $the_backup_id -n 2 -r $NDB_BACKUPS-$the_backup_id >> $NDB_TOOLS_OUTPUT

--disable_query_log
# Set low interval so changes are detected quickly
SET @old_ndb_metadata_check = @@global.ndb_metadata_check;
SET @old_ndb_metadata_check_interval = @@global.ndb_metadata_check_interval;
SET GLOBAL ndb_metadata_check = true;
SET GLOBAL ndb_metadata_check_interval = 0;
--enable_query_log

# Wait until the following 4 object changes are detected:
# Table 'test.t1'
# Table 'test.t2'
# Table 'test.child'
# Table 'test.parent'
--let $expected_changes = 4
--let $max_wait = 30
--source wait_metadata_changes_detected.inc

--disable_query_log
# Changes have been detected, reset values
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check;
SET GLOBAL ndb_metadata_check_interval = @old_ndb_metadata_check_interval;
# Suppress expected error in the log
CALL mtr.add_suppression("NDB: Definition of table .* in NDB Dictionary has changed");
--enable_query_log

# Wait until the changes detected have been synced
--let $max_wait = 30
--source wait_metadata_synced.inc

# Check that the only table to be synced is t2 since it contained
# no indexes
SHOW TABLES;
--sorted_result
SELECT * FROM t2;

# Rebuild indexes in NDB
--exec $NDB_RESTORE -b $the_backup_id -n 1 --rebuild-indexes $NDB_BACKUPS-$the_backup_id >> $NDB_TOOLS_OUTPUT

# Trigger table discovery of the 3 remaining tables
--sorted_result
SELECT * FROM t1;
--sorted_result
SELECT * FROM parent;
--sorted_result
SELECT * FROM child;

DROP TABLE t1,t2,child,parent;

--disable_query_log
SET GLOBAL ndb_metadata_check = true;
SET GLOBAL ndb_metadata_check_interval = 0;
--enable_query_log

# Wait until the blacklist is empty
--let $max_wait = 30
--source wait_metadata_sync_blacklist_empty.inc

#
# Check that the recommended way to use restore with --disable-indexes
# and --rebuild-indexes and auto sync works as expected. The steps are:
#
# 1. Turn auto sync off i.e. ndb-metadata-change = false
# 2. Complete the entire restore process i.e. --disable-indexes,
#    restore data, and --rebuild indexes
# 3. Turn auto sync on with desired interval
#

--disable_query_log ONCE
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check;

# Store initial counts of both detected and synchronized objects
--let $initial_detected_count = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_detected_count', Value, 1)
--let $initial_synced_count = query_get_value(SHOW STATUS LIKE 'Ndb_metadata_synced_count', Value, 1)

# Restore metadata, data, and indexes
--exec $NDB_RESTORE -b $the_backup_id -n 1 -m -r $NDB_BACKUPS-$the_backup_id >> $NDB_TOOLS_OUTPUT
--exec $NDB_RESTORE -b $the_backup_id -n 2 -r $NDB_BACKUPS-$the_backup_id >> $NDB_TOOLS_OUTPUT

# Turn auto sync on
--disable_query_log ONCE
SET GLOBAL ndb_metadata_check = true;

# Wait until the following 4 object changes are detected:
# Table 'test.t1'
# Table 'test.t2'
# Table 'test.parent'
# Table 'test.child'
--let $expected_changes = 4
--let $max_wait = 30
--source wait_metadata_changes_detected.inc

--disable_query_log
# Changes have been detected, reset values
SET GLOBAL ndb_metadata_check = @old_ndb_metadata_check;
SET GLOBAL ndb_metadata_check_interval = @old_ndb_metadata_check_interval;
--enable_query_log

# Wait until the changes detected have been synced
--let $max_wait = 30
--source wait_metadata_synced.inc

SHOW TABLES;

SHOW CREATE TABLE t1;
--sorted_result
SELECT * FROM t1;
SHOW CREATE TABLE t2;
--sorted_result
SELECT * FROM t2;
SHOW CREATE TABLE parent;
--sorted_result
SELECT * FROM parent;
SHOW CREATE TABLE child;
--sorted_result
SELECT * FROM child;

DROP TABLE t1,t2,child,parent;

--source suite/ndb/include/backup_restore_cleanup.inc
--remove_file $NDB_TOOLS_OUTPUT
