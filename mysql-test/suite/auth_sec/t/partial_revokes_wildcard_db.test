# Save the initial number of concurrent sessions
--source include/count_sessions.inc

--disable_query_log
CALL mtr.add_suppression("Ignored database grant with wildcard characters");
--enable_query_log

CREATE USER foo;
CREATE DATABASE `db_1`;
CREATE DATABASE `db%1`;

--echo #-----------------------------------------------------------------------
--echo # Case: Try to turn --partial_revokes ON when db grant with wildcard exists

# DB grant with single wildcard
GRANT SELECT ON db_1.* TO foo;
--error ER_WILDCARD_DB_GRANT_CONFLICTS_WITH_PARTIAL_REVOKES
SET @@global.partial_revokes=ON;

# Remove db grant with wildcard
REVOKE SELECT ON db_1.* FROM foo;

# DB grant with multi wildcard
GRANT SELECT ON `db%1`.* TO foo;

--error ER_WILDCARD_DB_GRANT_CONFLICTS_WITH_PARTIAL_REVOKES
SET @@global.partial_revokes=ON;

# Cleanup
REVOKE SELECT ON `db%1`.* FROM foo;
FLUSH PRIVILEGES;

--echo #-----------------------------------------------------------------------
--echo # Case: Try to create db grant with wildcard when --partial_revokes is ON

SET @@global.partial_revokes=ON;

# DB grant with single wildcard
--error ER_NO_WILDCARD_DB_GRANT_WITH_PARTIAL_REVOKES
GRANT SELECT ON db_1.* TO foo;

# DB grant with multi wildcard
--error ER_NO_WILDCARD_DB_GRANT_WITH_PARTIAL_REVOKES
GRANT SELECT ON `db%1`.* TO foo;

# Non-wildcard grants should work
GRANT SELECT ON `db\_1`.* TO foo;

# Non-wildcard grants should work
GRANT SELECT ON `db\%1`.* TO foo;

# Cleanup
REVOKE SELECT ON `db\_1`.* FROM  foo;
REVOKE SELECT ON `db\%1`.* FROM  foo;
FLUSH PRIVILEGES;
SET @@global.partial_revokes=OFF;

--echo #-----------------------------------------------------------------------
--echo # Case: DB grants with wildcards should be ignored if --partial_revokes
--echo #       is ON at startup/FLUSH PRIVILEGES

INSERT INTO mysql.db(user, host, db, Insert_priv) VALUES('foo', '%', 'db_1', 'Y');
INSERT INTO mysql.db(user, host, db, Insert_priv) VALUES('foo', '%', 'db%1', 'Y');

# Should succeed because we have not run FLUSH PRIVILEGES yet
# Same would be the case if database contains wildcard grants and
# is started with --partial_revokes=ON
SET @@global.partial_revokes=ON;

# Should generate a warning on server log
FLUSH PRIVILEGES;

# We let our server restart attempts write to the file $server_log.
let server_log= $MYSQLTEST_VARDIR/log/mysqld.1.err;
let SEARCH_FILE= $server_log;

--echo # Search for : Ignored database grant with wildcard characters 'db_1' for user 'foo'@'%' because --partial_revokes is set to ON
let SEARCH_PATTERN= Ignored database grant with wildcard characters 'db_1' for user 'foo'@'%' because --partial_revokes is set to ON;
--source include/search_pattern.inc

--echo # Search for : Ignored database grant with wildcard characters 'db%1' for user 'foo'@'%' because --partial_revokes is set to ON
let SEARCH_PATTERN= Ignored database grant with wildcard characters 'db%1' for user 'foo'@'%' because --partial_revokes is set to ON;
--source include/search_pattern.inc
--echo # Search completed.

# Must not show DB grants
SHOW GRANTS FOR foo;

# Cleanup
DELETE FROM mysql.db WHERE user = 'foo';
FLUSH PRIVILEGES;
SET @@global.partial_revokes=OFF;

--echo #-----------------------------------------------------------------------
--echo # Case: Partial revokes and nonwildcard db grants with _ and %

SET @@global.partial_revokes=ON;

GRANT SELECT ON *.* TO foo;
# Create restriction - We dont use '\' to escape '_' or '%'
# because wildcards are not supported in partial revokes
REVOKE SELECT ON `db_1`.* FROM foo;
REVOKE SELECT ON `db%1`.* FROM foo;

# Should show 2 restrictions
SHOW GRANTS FOR foo;

# Should remove restrictions on db_1
GRANT SELECT ON `db\_1`.* TO foo;
SHOW GRANTS FOR foo;

# Should remove restrictions on db%1
GRANT SELECT ON `db\%1`.* TO foo;
SHOW GRANTS FOR foo;

#Cleanup
REVOKE SELECT ON *.* FROM foo;
SET @@global.partial_revokes=OFF;

SET @@global.partial_revokes=ON;

GRANT SELECT ON *.* TO foo;
GRANT SELECT ON `db\_1`.* TO foo;
GRANT SELECT ON `db\%1`.* TO foo;
SHOW GRANTS FOR foo;

# Create restriction - We dont use '\' to escape '_' or '%'
# because wildcards are not supported in partial revokes
REVOKE SELECT ON `db_1`.* FROM foo;
REVOKE SELECT ON `db%1`.* FROM foo;

# Should show 2 restrictions
SHOW GRANTS FOR foo;

#Cleanup
REVOKE SELECT ON *.* FROM foo;
SET @@global.partial_revokes=OFF;

--echo #-----------------------------------------------------------------------
--echo # Cleanup

DROP DATABASE `db%1`;
DROP DATABASE `db_1`;
DROP USER foo;
--echo #-----------------------------------------------------------------------

# Wait till all disconnects are completed
--source include/wait_until_count_sessions.inc
