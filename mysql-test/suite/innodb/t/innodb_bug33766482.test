--source include/have_debug.inc
--source include/have_innodb_max_16k.inc

--disable_warnings
DROP TABLE IF EXISTS t1;
DROP PROCEDURE IF EXISTS fill;
DROP PROCEDURE IF EXISTS upd;
--enable_warnings

create table t1 (
  id int unsigned,
  a json default null,
  primary key (id),
  key ((cast(json_extract(a,_utf8mb4'$.b') as char(255) array)))
) engine=innodb default charset=utf8mb4 collate=utf8mb4_unicode_ci ;

#drop procedure if exists fill;
#drop procedure if exists upd;
delimiter |;
create procedure fill()
begin
  declare v_i bigint unsigned default 0;
  repeat
    set v_i:=v_i+1;
    REPLACE into t1(id,a) values(floor(rand()*100000),concat('{"a":"\'{ab:a,ba:',floor(rand()*100000),',bab:baa}\'","b":"\'{a:bbb,bab:true,bb:[',floor(rand()*100000),',8,7,1,9,10,8,7,3]}\'","ba":"b","baa":[6,1,1,2,9,8,0,5,2,4]}'));
  until v_i=200 end repeat;

end |

create procedure upd()
begin
  declare v_i bigint unsigned default 0;
  repeat
    set v_i:=v_i+1;
    update t1 set a= concat('{"b":',floor(rand()*100000),',"aba":"\'{a:[a,aa,b,aab,aa,bba,baa,a],b:bba}\'","b":',floor(rand()*100000),',"bb":2}');
  until v_i = 10 end repeat;

end |

delimiter ;|

REPLACE into t1(id,a) values(7,concat('{"a":"\'{ab:a,ba:',floor(rand()*100000),',bab:baa}\'","b":"\'{a:bbb,bab:true,bb:[',floor(rand()*100000),',8,7,1,9,10,8,7,3]}\'","ba":"b","baa":[6,1,1,2,9,8,0,5,2,4]}'));
update t1 set a= concat('{"b":',floor(rand()*100000),',"aba":"\'{a:[a,aa,b,aab,aa,bba,baa,a],b:bba}\'","b":',floor(rand()*100000),',"bb":2}');
update t1 set a= concat('{"b":',floor(rand()*100000),',"aba":"\'{a:[a,aa,b,aab,aa,bba,baa,a],b:bba}\'","b":',floor(rand()*100000),',"bb":2}');

--sleep 5
--let $memory_before_insert= `select CURRENT_COUNT_USED from performance_schema.memory_summary_global_by_event_name where event_name like 'memory/innodb/memory';`

call fill();

--sleep 5
--let $memory_after_insert= `select CURRENT_COUNT_USED from performance_schema.memory_summary_global_by_event_name where event_name like 'memory/innodb/memory';`

assert($memory_after_insert == $memory_before_insert);

--let $memory_before_update= `select CURRENT_COUNT_USED from performance_schema.memory_summary_global_by_event_name where event_name like 'memory/innodb/memory';`

call upd();

--sleep 5
--let $memory_after_update= `select CURRENT_COUNT_USED from performance_schema.memory_summary_global_by_event_name where event_name like 'memory/innodb/memory';`

assert($memory_after_update == $memory_before_update);


DROP PROCEDURE IF EXISTS fill;
DROP PROCEDURE IF EXISTS upd;
DROP TABLE t1;
