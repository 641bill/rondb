# ==== Purpose ====
#
# Check that the execution of SHOW SLAVE STATUS command is not blocked when IO
# thread is blocked waiting for disk space.
#
# ==== Implementation ====
#
# Simulate a scenario where IO thread is waiting for disk space while writing
# into the relay log. Execute SHOW SLAVE STATUS command after IO thread is
# blocked waiting for space. The command should not be blocked.
#
# ==== References ====
#
# Bug#21753696: MAKE SHOW SLAVE STATUS NON BLOCKING IF IO THREAD WAITS FOR
# DISK SPACE
# Bug#20685029: SLAVE IO THREAD SHOULD STOP WHEN DISK IS FULL
#
###############################################################################
--source include/have_debug.inc
# Inorder to grep a specific error pattern in error log a fresh error log
# needs to be generated.
--source include/force_restart.inc
--source include/master-slave.inc

# Generate events to be replicated to the slave
CREATE TABLE t1(a INT);
INSERT INTO t1 VALUES(1);
--sync_slave_with_master

# Those errors will only happen in the slave
CALL mtr.add_suppression("Disk is full writing");
CALL mtr.add_suppression("Retry in 60 secs");

# Stop the SQL thread to avoid writing on disk
--source include/stop_slave_sql.inc

# Set the debug option that will simulate disk full
--let $debug_saved= `SELECT @@GLOBAL.DEBUG`
SET @@GLOBAL.DEBUG= 'd,simulate_io_thd_wait_for_disk_space';

# Generate events to be replicated to the slave
--connection master
INSERT INTO t1 VALUES(2);

--connection slave1
set debug_sync='now WAIT_FOR parked';

# Get the relay log file name, also using SHOW SLAVE STATUS
--let $relay_log_file= query_get_value(SHOW SLAVE STATUS, Relay_Log_File, 1)

--connection slave
# Restore the debug options to "simulate" freed space on disk
SET @@GLOBAL.DEBUG= '$debug_saved';

# There should be a message in the error log of the slave stating
# that it was waiting for space to write on the relay log.
--let $assert_file=$MYSQLTEST_VARDIR/tmp/slave.err
# Grep only after the message that the I/O thread has started
--let $assert_only_after= Slave I/O .* connected to master .*replication started in log .* at position
--let $assert_count= 1
--let $assert_select=Disk is full writing .*$relay_log_file.* No space left on device
--let $assert_text= Found the disk full error message on the slave
--source include/assert_grep.inc

# Start the SQL thread to let the slave to sync and finish gracefully
--source include/start_slave_sql.inc

# Cleanup
--connection master
DROP TABLE t1;
--source include/rpl_end.inc
