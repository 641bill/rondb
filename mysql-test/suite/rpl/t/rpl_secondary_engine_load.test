#####################################################################
#                                                                   #
# The aim of this test is to set up replication between a master    #
# and slave and check that the new ALTER TABLE syntax that has      #
# been introduced in WL#11581 and WL#11581 to support secondary     #
# engines work as expected. A mock engine has been written to test  #
# the statements.                                                   #
#                                                                   #
# Creation Date: 2018-06-21                                         #
# Author: Deepa Dixit                                               #
#                                                                   #
#####################################################################

--source include/master-slave.inc
CALL mtr.add_suppression("\\[ERROR\\] .*MY-\\d+.* \\[Repl\\] Slave SQL for channel '':.*Error 'Unknown storage engine 'MOCK'' on query");
CALL mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* \\[Repl\\] Slave: Unknown storage engine 'MOCK'");
CALL mtr.add_suppression("\\[Warning\\] .*MY-\\d+.* \\[Server\\] Unsafe statement written to the binary log using statement format");
CALL mtr.add_suppression("The slave coordinator and worker threads are stopped");

--connection master
--echo [ Connection Master ]

# Install plugin on master.
--replace_regex /\.dll/.so/
--eval INSTALL PLUGIN mock SONAME '$MOCK_PLUGIN'

--connection slave
--echo [ Connection Slave ]

# Install plugin on slave.
--replace_regex /\.dll/.so/
--eval INSTALL PLUGIN mock SONAME '$MOCK_PLUGIN'

--connection master
--echo [ Connection Master ]

# Create table with SECONDARY_ENGINE MOCK
CREATE TABLE t1 (pk INT PRIMARY KEY AUTO_INCREMENT, vc VARCHAR(10), j JSON, b BLOB, vb VARBINARY(32)) SECONDARY_ENGINE=MOCK;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check if the table is created with the secondary engine.
SHOW CREATE TABLE t1;

# Since the table is not offloaded to MOCK engine, it
# appears to be non-existent.
--error ER_NO_SUCH_TABLE
SELECT * FROM t1;

--connection master
--echo [ Connection Master ]

# Insert rows and offload the table to mock engine.
INSERT INTO t1 VALUES(NULL, 'Poodle', '{"key":"value"}', 'Pug', x'1234');
INSERT INTO t1 VALUES(NULL, 'Labrador', '[{"key":"value"},{"key":"value2"}]', 'Boxer', x'abcd');
INSERT INTO t1 VALUES(NULL, 'Beagle', '[1,2,3]', 'Pitbull', x'abcd1234');
INSERT INTO t1 VALUES(NULL, 'Collie', '["ab","bc","cd"]', 'Huskey', x'1ab2c3d4');
INSERT INTO t1 VALUES(NULL, 'Shiba', '{"1":"one"}', 'Mastiff', x'ffff');

ALTER TABLE t1 SECONDARY_LOAD;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check that the table is offloaded.
SELECT * FROM t1;

--connection master
--echo [ Connection Master ]

# Create a table like t1.
CREATE TABLE t2 LIKE t1;

# Insert data from t1 to t2.
--disable_warnings
INSERT INTO t2 SELECT * FROM t1;
--enable_warnings

# Offload the table to MOCK engine.
ALTER TABLE t2 SECONDARY_LOAD;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check that t2 is created with the secondary engine.
SHOW CREATE TABLE t2;

SELECT * FROM t2;

--connection master
--echo [ Connection Master ]

# Unload the table from the secondary engine.
ALTER TABLE t1 SECONDARY_UNLOAD;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check that the table is unloaded.
--error ER_NO_SUCH_TABLE
SELECT * FROM t1;

--connection master
--echo [ Connection Master ]

# Change the secondary engine to NULL.
ALTER TABLE t1 SECONDARY_ENGINE=NULL;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check whether the secondary engine has been changed.
SHOW CREATE TABLE t1;
SELECT * FROM t1;

--connection master
--echo [ Connection Master ]

# Change the secondary engine to something non existent.
ALTER TABLE t1 SECONDARY_ENGINE=HELLO;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Check the secondary engine of the table.
SHOW CREATE TABLE t1;

# Check whether the ALTER statements work only on the slave.
ALTER TABLE t1 SECONDARY_ENGINE=NULL;
ALTER TABLE t1 SECONDARY_ENGINE=NADA;
SHOW CREATE TABLE t1;

ALTER TABLE t1 SECONDARY_ENGINE=NULL;
ALTER TABLE t1 SECONDARY_ENGINE=MOCK;
SHOW CREATE TABLE t1;
ALTER TABLE t1 SECONDARY_LOAD;
SELECT * FROM t1;
ALTER TABLE t1 SECONDARY_UNLOAD;
ALTER TABLE t2 SECONDARY_UNLOAD;

--connection master
--echo [ Connection Master ]

ALTER TABLE t1 SECONDARY_ENGINE=NULL;
ALTER TABLE t1 SECONDARY_ENGINE=MOCK;

--source include/sync_slave_sql_with_master.inc
--echo [ Connection Slave ]

# Uninstall the plugin on slave.
UNINSTALL PLUGIN mock;

# Stop slave SQL thread.
--source include/stop_slave_sql.inc

--connection master
--echo [ Connection Master ]

# Check if table gets offloaded if there is no plugin installed on slave.
ALTER TABLE t1 SECONDARY_LOAD;

--connection slave
--echo [ Connection Slave ]

START SLAVE SQL_THREAD;

# Since the plugin is not available, this error is expected.
--let $slave_sql_errno = convert_error(ER_UNKNOWN_STORAGE_ENGINE)
--source include/wait_for_slave_sql_error.inc

# Install the plugin on slave again
--replace_regex /\.dll/.so/
--eval INSTALL PLUGIN mock SONAME '$MOCK_PLUGIN'

--sleep 3
--source include/start_slave_sql.inc
--let $slave_param= Slave_SQL_Running_State
--let $slave_param_value= Slave has read all relay log; waiting for more updates
--source include/wait_for_slave_param.inc

SELECT * FROM t1;

--connection master
--echo [ Connection Master ]

# Clean up
DROP TABLE t1;
DROP TABLE t2;
UNINSTALL PLUGIN mock;

--source include/sync_slave_sql_with_master.inc

# Uninstall plugin on slave too.
--sleep 3
UNINSTALL PLUGIN mock;

--source include/rpl_end.inc
