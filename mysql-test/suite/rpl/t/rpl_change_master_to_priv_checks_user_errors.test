# ==== Purpose ====
#
# This script tests error handling regarding `PRIVILEGE_CHECKS_USER` option of
# `CHANGE MASTER TO ...`.
#
# ==== Requirements ====
#
# R1. Replication must fail SQL thread start if user given to
#     `PRIVILEGE_CHECKS_USER` option of `CHANGE MASTER TO ...` is set to a user
#     that doesn't have `REPLICATION_APPLIER` privilege.
#
# R2. Replication must fail on first `CREATE TABLE` if user given to
#     `PRIVILEGE_CHECKS_USER` option of `CHANGE MASTER TO ...` is set to a user
#     that doesn't have privileges to create the given table.
#
# ==== Implementation ====
#
# TC1. `Query_log_event` should fail if `PRIVILEGE_CHECKS_USER` user doesn't
#      have REPLICATION_APPLIER privilege.
# --------------------------------------------------------------------------
# 1) Set `PRIVELEGE_CHECKS_USER` to a user without `REPLICATION_APPLIER`
#    privilege.
# 2) Start the slave.
# 3) Wait for slave to error out.
#
# TC2. `Query_log_event` should fail if `PRIVILEGE_CHECKS_USER` user doesn't
#      have CREATE privilege on the active database.
# --------------------------------------------------------------------------
# 1) Set `PRIVELEGE_CHECKS_USER` to a user without `CREATE` privileges.
# 2) Create a table on the master.
# 3) Wait for slave to error out.
#
# ==== References ====
#
# WL#12966 Replication with privilege checks
#

--source include/have_binlog_format_row.inc
--let $rpl_skip_start_slave = 1
--source include/master-slave.inc

--let $master_log_pos = query_get_value(SHOW MASTER STATUS, Position, 1)

--echo #
--echo # TC1. `Query_log_event` should fail if `PRIVILEGE_CHECKS_USER` user
--echo #      doesn't have REPLICATION_APPLIER privilege.
--echo # -------------------------------------------------------------------
#
# 1) Set `PRIVELEGE_CHECKS_USER` to a user without `REPLICATION_APPLIER`
#    privilege.
#
--source include/rpl_connection_slave.inc

CALL mtr.add_suppression(".PRIVILEGE_CHECKS_USER for replication channel.");
CALL mtr.add_suppression(".*The slave coordinator and worker threads are stopped.*");

CREATE USER 'u1'@'localhost';
CHANGE MASTER TO PRIVILEGE_CHECKS_USER = 'u1'@'localhost' FOR CHANNEL '';

#
# 2) Start the slave.
#
START SLAVE;

#
# 3) Wait for slave to error out.
#
--let $slave_sql_errno = convert_error(ER_WARN_LOG_PRIVILEGE_CHECKS_USER_NEEDS_RPL_APPLIER_PRIV)
--source include/wait_for_slave_sql_error.inc
--source include/stop_slave.inc

GRANT SESSION_VARIABLES_ADMIN, REPLICATION_APPLIER ON *.* TO 'u1'@'localhost';

--echo #
--echo # TC2. `Query_log_event` should fail if `PRIVILEGE_CHECKS_USER` user
--echo #      doesn't have CREATE privilege on the active database.
--echo # -------------------------------------------------------------------

#
# 1) Set `PRIVELEGE_CHECKS_USER` to a user without `CREATE` privileges.
#
CALL mtr.add_suppression(".CREATE command denied to user.");

RESET SLAVE ALL;
--replace_result $MASTER_MYPORT MY_MASTER_PORT $master_log_pos MY_MASTER_LOG_POS
--eval CHANGE MASTER TO MASTER_USER='root', MASTER_PORT=$MASTER_MYPORT, MASTER_HOST='127.0.0.1', PRIVILEGE_CHECKS_USER='u1'@'localhost', MASTER_LOG_POS=$master_log_pos
START SLAVE;

#
# 2) Create a table on the master.
#
--source include/rpl_connection_master.inc
CREATE TABLE t1 (c1 INT);

#
# 3) Wait for slave to error out.
#
--source include/rpl_connection_slave.inc
--let $slave_sql_errno = convert_error(ER_TABLEACCESS_DENIED_ERROR)
--source include/wait_for_slave_sql_error.inc
--source include/stop_slave.inc
RESET SLAVE;

# Clean up
DROP USER 'u1'@'localhost';
--source include/rpl_connection_master.inc
DROP TABLE t1;
--let $rpl_only_running_threads = 1
--source include/rpl_end.inc
