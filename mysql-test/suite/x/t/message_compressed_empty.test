 ## Preamble
--source include/xplugin_preamble.inc
--source include/xplugin_create_user.inc

## TEST STARTS HERE
--write_file $MYSQL_TMP_DIR/too_large.tmp
-->import wait_until_disconnect.macro
-->import connection.macro

#
# The X Protocol message is defined in following way
#
#   |4 bytes       |1 byte     |(payload-size - 1)bytes.. |
#   |X Protocol frame                                     |
#   |payload-size  |payload                               |
#   |payload-size  |MsgType    |Protobuf-payload          |
#
# Still there are few exceptions, for following messages:
#
# *  COMPRESSION_SINGLE = 46 (the ID in hex 0x2E)
# *  COMPRESSION_MULTIPLE = 47 (the ID in hex 0x2F)
#   |4 bytes       |1 byte     |1bytes |4bytes           |(payload-size - 6)bytes..  |
#   |payload-size  |payload                                                          |
#   |payload-size  |SINGLE_TYPE|MsgType|Uncompressed-size|compressed-frame-payload   |
#
# *  COMPRESSION_GROUP = 48 (the ID in hex 0x30);
#   |4 bytes       |1 byte       |4bytes           |(payload-size - 5)bytes..  |
#   |payload-size  |payload                                                    |
#   |payload-size  |MULTIPLE_TYPE|Uncompressed-size|group-frame-payload        |
#
# The test will send X protocol frame with empty compression-header or with empty
# payload and observe an error and disconnect.
#
# Still the compression style "single" may have an empty payload. Thus
# the test will only verify GROUP and MULTIPLE for that case.

-->macro New_session_with_compression	%COMP_CSTYLE%
newsession SOME_SESSION	-;
-->quiet
callmacro Verify_its_xprotocol_connection;
Mysqlx.Connection.CapabilitiesSet {
  capabilities {
    capabilities {
      name: "compression"
      value {
        type: OBJECT
        obj {
          fld {
            key: "algorithm"
            value {
              type: SCALAR
              scalar {
                type: V_STRING
                v_string {
                  value: "%OPTION_COMPRESSION_ALGORITHM%"
                }
              }
            }
          }
          fld {
            key: "client_style"
            value {
              type: SCALAR
              scalar {
                type: V_STRING
                v_string {
                  value: "%COMP_CSTYLE%"
                }
              }
            }
          }
        }
      }
    }
  }
}
recvok;
enable_compression %OPTION_COMPRESSION_ALGORITHM%;
login;
-->noquiet
-->endmacro

-->macro Execute_invalid_message	%COMP_CSTYLE%	%MSG%
callmacro New_session_with_compression	%COMP_CSTYLE%;

hexsend %MSG%;
recverror ER_X_BAD_COMPRESSED_FRAME;

noquiet;
echo ## Waiting for disconnection;
callmacro Wait_until_disconnect;
-->quiet
-->endmacro

-->echo
-->echo ## 1. Send empty compressed header in
-->echo #  a. SINGLE message
-->echo #  b. MULTIPE message
-->echo #  c. GROUP message
-->echo #
-->echo ## 2. Send empty compressed payload in
-->echo #  a. MULTIPE message
-->echo #  b. GROUP message
-->echo #
-->echo ## 3. Send empty single-compressed frame and check its processed
-->echo #

-->echo;
-->echo # 1.a
#
# length=1, type=single
callmacro Execute_invalid_message	single	010000002E;

-->echo;
-->echo # 1.b
# length=1, type=multiple
#
callmacro Execute_invalid_message	multiple	010000002F;

-->echo;
-->echo # 1.c
#
# length=1, type=group
#
callmacro Execute_invalid_message	group	0100000030;

-->echo;
-->echo # 2.a
#
# length=6, type=multiple, comp-msg-type=stmtexecute, uncomp-length=0
#
callmacro Execute_invalid_message	multiple	060000002F0C00000000;

-->echo;
-->echo # 2.b
#
# length=5, type=GROUP, uncomp-length=0
#
callmacro Execute_invalid_message	group	050000003000000000;

-->echo;
-->echo # 3.

callmacro New_session_with_compression	single;
hexsend 060000002E0600000000;
recvok;
login;

EOF

# Set the timeout for connection to 300 seconds
# which is must be greater than the peerdisc/timeout
SET GLOBAL mysqlx_connect_timeout = 300;
SET GLOBAL mysqlx_wait_timeout = 300;
SET GLOBAL mysqlx_max_allowed_packet = 1000;

echo;
echo ## A. Execute the test using "deflate" algorithm;
echo #;

exec $MYSQLXTEST 
  -u x_root
  --compression-mode=required
  --compression-algorithm=deflate
  --file=$MYSQL_TMP_DIR/too_large.tmp 2>&1;

echo;
echo ## B. Execute the test using "lz4" algorithm;
echo #;

exec $MYSQLXTEST 
  -u x_root
  --compression-mode=required
  --compression-algorithm=lz4
  --file=$MYSQL_TMP_DIR/too_large.tmp 2>&1;

## Cleanup
SET GLOBAL mysqlx_connect_timeout= DEFAULT;
SET GLOBAL mysqlx_wait_timeout = DEFAULT;
SET GLOBAL mysqlx_max_allowed_packet = DEFAULT;
--remove_file $MYSQL_TMP_DIR/too_large.tmp
--source include/xplugin_drop_user.inc
