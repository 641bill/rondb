 ## Preamble
--source include/xplugin_preamble.inc
--source include/xplugin_create_user.inc

## TEST STARTS HERE
--write_file $MYSQL_TMP_DIR/too_large.tmp
-->import wait_until_disconnect.macro
-->import connection.macro

#
# The X Protocol message is defined in following way
#
# | <------------------- X Protocol frame ----------------------------------> |
# |                        |                                                  |
# | <--- payload-size ---> | <--------------- payload ----------------------> |
# |                        |                  |                               |
# |                        | <-- msg-type --> | <---- Protobuf-payload -----> |
# | 4 bytes                | 1 byte           |  n bytes                      |

#
# Still there are few exceptions, for following messages:
#
# *  COMPRESSION_SINGLE = 46 (the ID in hex 0x2E)
# *  COMPRESSION_MULTIPLE = 47 (the ID in hex 0x2F)
#
# | <-------------------------- X Protocol frame ----------------------------------> |
# |                    |                                                             |
# | <- payload-size -> | <------------------------ payload ------------------------> |
# |                    |                                                             |
# |                    | <-------------------- compression-frame ------------------> |
# |                    |                          |                                  |
# |                    | <------- compression-header --------> |<compressed-payload->|
# |                    |        |          |                   |                     |
# |                    |<SINGLE>|<msg-type>|<uncompressed-size>|                     |
# | 4 bytes            | 1 byte | 1 byte   | 4 bytes           | payload-size - 6    |
#
# *  COMPRESSION_GROUP = 48 (the ID in hex 0x30);
#
# | <-------------------------- X Protocol frame ----------------------------------> |
# |                    |                                                             |
# | <- payload-size -> | <------------------------ payload ------------------------> |
# |                    |                                                             |
# |                    | <-------------------- compression-frame ------------------> |
# |                    |                            |                                |
# |                    | <-- compression-header --> | <---- group-frame-payload ---> |
# |                    |        |                   | <---- compressed-payload ----> |
# |                    |        |                   |                                |
# |                    |<GROUP >|<uncompressed-size>|                                |
# | 4 bytes            | 1 byte | 4 bytes           | (payload-size - 5) bytes       |
#
#
# The test will send X protocol frame with empty compression-header or with empty
# payload and observe an error and disconnect.
#
# Still the compression style "single" may have an empty payload. Thus
# the test will only verify GROUP and MULTIPLE for that case.

-->macro New_session_with_caps	%SESS%	%COMP_ALGO%	%COMP_CSTYLE%
newsession %SESS%	-;
-->quiet
callmacro Verify_its_xprotocol_connection;
Mysqlx.Connection.CapabilitiesSet {
  capabilities {
    capabilities {
      name: "compression"
      value {
        type: OBJECT
        obj {
          fld {
            key: "algorithm"
            value {
              type: SCALAR
              scalar {
                type: V_STRING
                v_string {
                  value: "%COMP_ALGO%"
                }
              }
            }
          }
          fld {
            key: "client_style"
            value {
              type: SCALAR
              scalar {
                type: V_STRING
                v_string {
                  value: "%COMP_CSTYLE%"
                }
              }
            }
          }
        }
      }
    }
  }
}
recvok;
enable_compression %COMP_ALGO%;
login;
-->noquiet
-->endmacro

-->echo
-->echo ## 1. Send compressed message with invalid payload
-->echo #  a. Send compressed-single-frame with too long-uncompressed payload size
-->echo #  b. Send compressed-multiple-frame with too long-uncompressed protobuf size
-->echo #  c. Send compressed-single-frame with invalid compressed-payload
-->echo #  d. Send compressed-multiple-frame with invalid compressed-payload
-->echo #  e. Send compressed-group-frame with invalid compressed-payload
-->echo ## 2. Send compressed message with invalid message
-->echo #  a. Send compressed-single-frame with StmtExecute and missing fields (not initialized error)
-->echo #  b. Send compressed-single-frame with not know message, and verify that its dispatched
-->echo #  c. Send compressed-single-frame with message that exceedes protobufs nested
-->echo #     messages limit, and verify that its rejected with proper error

-->echo;
-->echo # 1.a.
callmacro New_session_with_caps
	SESS_SINGLE1
	%OPTION_COMPRESSION_ALGORITHM%
	single;
#
# length=6, type=SINGLE, msg-type=12 =0x0c uncomp-length=268435456
#
hexsend 060000002E0C00000010;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 1.b.
callmacro New_session_with_caps
	SESS_MULTIPLE1
	%OPTION_COMPRESSION_ALGORITHM%
	multiple;
hexsend %COMP%;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 1.c.
callmacro New_session_with_caps
	SESS_SINGLE2
	%OPTION_COMPRESSION_ALGORITHM%
	single;
#
# length=23, type=SINGLE, msg-type=12 =0x0c uncomp-length=256
# Some garbage as compressed-payload aaaabbbb11223333344ffffeeee1111222
#
hexsend 170000002E0C00010000aaaabbbb11223333344ffffeeee1111222;
recverror ER_X_DECOMPRESSION_FAILED;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 1.d.
callmacro New_session_with_caps
	SESS_MULTIPLE2
	%OPTION_COMPRESSION_ALGORITHM%
	multiple;
#
# length=23, type=MULTIPLE, msg-type=12 =0x0c uncomp-length=256
# Some garbage as compressed-payload aaaabbbb11223333344ffffeeee1111222
#
hexsend 170000002F0C00010000aaaabbbb11223333344ffffeeee1111222;
recverror ER_X_DECOMPRESSION_FAILED;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 1.e.
callmacro New_session_with_caps
	SESS_GROUP1
	%OPTION_COMPRESSION_ALGORITHM%
	group;
#
# length=22, type=GROUP, uncomp-length=256
# Some garbage as compressed-payload aaaabbbb11223333344ffffeeee1111222
#
hexsend 160000003000010000aaaabbbb11223333344ffffeeee1111222;
recverror ER_X_DECOMPRESSION_FAILED;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 2.a.
callmacro New_session_with_caps
	SESS_SINGLE3
	%OPTION_COMPRESSION_ALGORITHM%
	single;
#
# length=6, type=SINGLE, msg-type=12=0x0c uncomp-length=0
#
hexsend 060000002E0C00000000;
recverror ER_X_BAD_MESSAGE;
callmacro Wait_until_disconnect;


-->echo;
-->echo # 2.b.
callmacro New_session_with_caps
	SESS_SINGLE4
	%OPTION_COMPRESSION_ALGORITHM%
	single;
#
# length=6, type=SINGLE, msg-type=12=0xFc uncomp-length=0
#
Mysqlx.Expect.Open {
  cond {condition_key:1}
}
recvok;

hexsend 060000002EFC00000000;
recverror ER_UNKNOWN_COM_ERROR;

stmtadmin ping;
recverror ER_X_EXPECT_NO_ERROR_FAILED;
Mysqlx.Expect.Close{
}
recverror ER_X_EXPECT_NO_ERROR_FAILED;
stmtadmin ping;
recvresult;


-->echo;
-->echo # 2.c.
#
# Please look into message_protobuf_nested.test for more details.
callmacro New_session_with_caps
	SESS_SINGLE5
	%OPTION_COMPRESSION_ALGORITHM%
	single;
-->stmtadmin ensure_collection	 {"schema":"xtest", "name":"coll"}
-->recvresult

-->macro Send_crud_find_with_repeated_nested_objects	%OBJECTS_TO_NEST%
-->varlet %NESTED_OBJECTS%

-->varlet %OBJECTS_TO_REPEAT% %OBJECTS_TO_NEST%
-->varinc %OBJECTS_TO_REPEAT% -3

-->repeat %OBJECTS_TO_REPEAT%	%ITERATION%
-->varlet %OBJECT_NUMBER% %ITERATION%
-->varinc %OBJECT_NUMBER% 4
-->varlet %NESTED_OBJECTS% %NESTED_OBJECTS%  value { type: ARRAY array { value { type: LITERAL literal { type: V_SINT v_signed_int: %OBJECT_NUMBER% } }
-->endrepeat

-->repeat %OBJECTS_TO_REPEAT%
-->varlet %NESTED_OBJECTS% %NESTED_OBJECTS%  } }
-->endrepeat

-->quiet
-->begin_compress SINGLE
Mysqlx.Crud.Find {
  collection {
    name: "coll"
    schema: "test"
  }
  data_model: DOCUMENT
  criteria {
    type: OPERATOR
    operator {
      name: "=="
      param {
        type: IDENT
        identifier {
          document_path {
            type: MEMBER
            value: "ARR0"
          }
        }
      }
      param {
        type: ARRAY
        array {
          value {
            type: LITERAL
            literal {
              type: V_SINT
              v_signed_int: 3
            }
          }
          %NESTED_OBJECTS%
        }
      }
    }
  }
}
-->end_compress
-->noquiet
-->endmacro

-->echo Try to send number of object more than the X Protocol limit 101 (2 * 51)
-->callmacro Send_crud_find_with_repeated_nested_objects	51
-->recverror ER_X_BAD_MESSAGE
callmacro Wait_until_disconnect;

EOF

CREATE SCHEMA xtest;

# Set the timeout for connection to 300 seconds
# which is must be greater than the peerdisc/timeout
SET GLOBAL mysqlx_connect_timeout = 300;
SET GLOBAL mysqlx_wait_timeout = 300;
SET GLOBAL mysqlx_max_allowed_packet = 1000;

echo;
echo ## A. Execute the test with deflate;
echo #;
#
# COMP=length=23, type=MULTIPLE, msg-type=12 =0x0c uncomp-length=268435456
#
# uint32=268435456 encoded in zlib 789c4bcaccd32b492d2ee1020010fc0332
exec $MYSQLXTEST 
  -u x_root
  --compression-mode=required
  --compression-algorithm=deflate
  --compression-server-style=
  --compression-client-style=single
  --schema xtest
  -v%COMP%=170000002F0C00000010789c4bcaccd32b492d2ee1020010fc0332
  --file=$MYSQL_TMP_DIR/too_large.tmp 2>&1;

echo;
echo ## B. Execute the test with lz4;
echo #;
#
# COMP=length=25, type=MULTIPLE, msg-type=12 =0x0c uncomp-length=268435456
#
# uint32=268435456 encoded in lz4f 04224d184040c0040000800000001000000000
exec $MYSQLXTEST 
  -u x_root
  --compression-mode=preferred
  --compression-algorithm=lz4
  --compression-server-style=
  --compression-client-style=multiple
   -v%COMP%=190000002F0C0000001004224d184040c0040000800000001000000000
  --schema xtest
  --file=$MYSQL_TMP_DIR/too_large.tmp 2>&1;

## Cleanup
SET GLOBAL mysqlx_connect_timeout= DEFAULT;
SET GLOBAL mysqlx_wait_timeout = DEFAULT;
SET GLOBAL mysqlx_max_allowed_packet = DEFAULT;
DROP SCHEMA xtest;
--remove_file $MYSQL_TMP_DIR/too_large.tmp
--source include/xplugin_drop_user.inc
