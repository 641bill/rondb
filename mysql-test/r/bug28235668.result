# Create a partitioned table with virtual columns
CREATE TABLE t1_1 (
`col1` int(11) DEFAULT NULL,
`col2` int(11) DEFAULT NULL,
`col3` int(11) DEFAULT NULL,
`col4` text,
`col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
`col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
/*!50100 PARTITION BY RANGE ((`col1` * 2))
(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB,
PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB,
PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB,
PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
# "Clone" table using AS SELECT ...
CREATE TABLE temp25058 AS SELECT * FROM t1_1 WHERE 1 <> 1;
SHOW CREATE TABLE temp25058;
Table	Create Table
temp25058	CREATE TABLE `temp25058` (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  `col3` int(11) DEFAULT NULL,
  `col4` text,
  `col5` varchar(500) DEFAULT NULL,
  `col6` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
# Select from this table is ok - no error
SELECT * FROM temp25058;
col1	col2	col3	col4	col5	col6
# Exchanging dissimilar tables is not a supported action for
# tables with generated columns.
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,
EXCHANGE PARTITION p2 WITH TABLE temp25058;
ERROR HY000: 'Exchanging partitions for non-generated columns' is not supported for generated columns.
# No viritual columns in Innodb or DD
SHOW CREATE TABLE temp25058;
Table	Create Table
temp25058	CREATE TABLE `temp25058` (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  `col3` int(11) DEFAULT NULL,
  `col4` text,
  `col5` varchar(500) DEFAULT NULL,
  `col6` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
# No viritual columns in Innodb or DD
SELECT * FROM temp25058;
col1	col2	col3	col4	col5	col6
DROP TABLE temp25058;
DROP TABLE t1_1;
#
# Create a table with generated columns to ensure similar tables are
# still allowed to exchange partitions.
#
# Create a partitioned table with virtual columns
CREATE TABLE t1_1 (
`col1` int(11) DEFAULT NULL,
`col2` int(11) DEFAULT NULL,
`col3` int(11) DEFAULT NULL,
`col4` text,
`col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
`col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
/*!50100 PARTITION BY RANGE ((`col1` * 2))
(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB,
PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB,
PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB,
PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */;
CREATE TABLE temp2(
`col1` int(11) DEFAULT NULL,
`col2` int(11) DEFAULT NULL,
`col3` int(11) DEFAULT NULL,
`col4` text,
`col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
`col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
SHOW CREATE TABLE temp2;
Table	Create Table
temp2	CREATE TABLE `temp2` (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  `col3` int(11) DEFAULT NULL,
  `col4` text,
  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
SELECT * FROM temp2;
col1	col2	col3	col4	col5	col6
# Partitions are now able to exchange since they are both virtual
ALTER TABLE t1_1 ALGORITHM DEFAULT , LOCK SHARED ,
EXCHANGE PARTITION p2 WITH TABLE temp2;
# Virtual columns in Innodb and DD
SHOW CREATE TABLE temp2;
Table	Create Table
temp2	CREATE TABLE `temp2` (
  `col1` int(11) DEFAULT NULL,
  `col2` int(11) DEFAULT NULL,
  `col3` int(11) DEFAULT NULL,
  `col4` text,
  `col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
  `col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
# Virtual columns in Innodb and DD
SELECT * FROM temp2;
col1	col2	col3	col4	col5	col6
# Virtual columns in Innodb and DD
SELECT * FROM t1_1;
col1	col2	col3	col4	col5	col6
# Cleanup
DROP TABLE temp2;
DROP TABLE t1_1;
