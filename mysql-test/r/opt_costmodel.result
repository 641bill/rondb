#
# Bug#20443863 USE OF WORST_SEEKS IN FIND_BEST_REF() CAN LEAD TO
#              WRONG QUERY PLAN
#
CREATE TABLE t1 (
i1 INTEGER,
i2 INTEGER,
i3 INTEGER,
KEY(i1,i2)
) ENGINE=InnoDB;
INSERT INTO t1 VALUES (1, 1, 1), (1, 1, 1),(1, 1, 1),(1, 1, 1),
(2, 2, 1), (2, 2, 1),(2, 2, 1),(2, 2, 1),
(3, 3, 1), (3, 3, 1),(3, 3, 1),(3, 3, 1);
EXPLAIN FORMAT=JSON SELECT i3 FROM t1 WHERE i1 = 1 AND i2 = 1;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "2.80"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": [
        "i1"
      ],
      "key": "i1",
      "used_key_parts": [
        "i1",
        "i2"
      ],
      "key_length": "10",
      "ref": [
        "const",
        "const"
      ],
      "rows_examined_per_scan": 4,
      "rows_produced_per_join": 4,
      "filtered": "100.00",
      "cost_info": {
        "read_cost": "2.00",
        "eval_cost": "0.80",
        "prefix_cost": "2.80",
        "data_read_per_join": "64"
      },
      "used_columns": [
        "i1",
        "i2",
        "i3"
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`i3` AS `i3` from `test`.`t1` where ((`test`.`t1`.`i2` = 1) and (`test`.`t1`.`i1` = 1))
EXPLAIN FORMAT=JSON SELECT i3 FROM t1 WHERE i1 = 1 AND i3 = 1;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "2.80"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": [
        "i1"
      ],
      "key": "i1",
      "used_key_parts": [
        "i1"
      ],
      "key_length": "5",
      "ref": [
        "const"
      ],
      "rows_examined_per_scan": 4,
      "rows_produced_per_join": 0,
      "filtered": "10.00",
      "cost_info": {
        "read_cost": "2.00",
        "eval_cost": "0.08",
        "prefix_cost": "2.80",
        "data_read_per_join": "6"
      },
      "used_columns": [
        "i1",
        "i3"
      ],
      "attached_condition": "(`test`.`t1`.`i3` = 1)"
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`i3` AS `i3` from `test`.`t1` where ((`test`.`t1`.`i3` = 1) and (`test`.`t1`.`i1` = 1))
UPDATE mysql.server_cost
SET cost_value=0.2
WHERE cost_name="row_evaluate_cost";
UPDATE mysql.server_cost
SET cost_value=0.1
WHERE cost_name="key_compare_cost";
UPDATE mysql.server_cost
SET cost_value=2.0
WHERE cost_name="memory_temptable_create_cost";
UPDATE mysql.server_cost
SET cost_value=0.2
WHERE cost_name="memory_temptable_row_cost";
UPDATE mysql.server_cost
SET cost_value=40
WHERE cost_name="disk_temptable_create_cost";
UPDATE mysql.server_cost
SET cost_value=1.0
WHERE cost_name="disk_temptable_row_cost";
UPDATE mysql.engine_cost
SET cost_value=1.0
WHERE cost_name="io_block_read_cost";
UPDATE mysql.server_cost
SET cost_value = 2 * cost_value;
UPDATE mysql.engine_cost
SET cost_value = 2 * cost_value;
SELECT cost_name, cost_value FROM mysql.server_cost;
cost_name	cost_value
disk_temptable_create_cost	80
disk_temptable_row_cost	2
key_compare_cost	0.2
memory_temptable_create_cost	4
memory_temptable_row_cost	0.4
row_evaluate_cost	0.4
SELECT cost_name, cost_value FROM mysql.engine_cost;
cost_name	cost_value
io_block_read_cost	2
FLUSH OPTIMIZER_COSTS;
EXPLAIN FORMAT=JSON SELECT i3 FROM t1 WHERE i1 = 1 AND i2 = 1;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "5.60"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": [
        "i1"
      ],
      "key": "i1",
      "used_key_parts": [
        "i1",
        "i2"
      ],
      "key_length": "10",
      "ref": [
        "const",
        "const"
      ],
      "rows_examined_per_scan": 4,
      "rows_produced_per_join": 4,
      "filtered": "100.00",
      "cost_info": {
        "read_cost": "4.00",
        "eval_cost": "1.60",
        "prefix_cost": "5.60",
        "data_read_per_join": "64"
      },
      "used_columns": [
        "i1",
        "i2",
        "i3"
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`i3` AS `i3` from `test`.`t1` where ((`test`.`t1`.`i2` = 1) and (`test`.`t1`.`i1` = 1))
EXPLAIN FORMAT=JSON SELECT i3 FROM t1 WHERE i1 = 1 AND i3 = 1;
EXPLAIN
{
  "query_block": {
    "select_id": 1,
    "cost_info": {
      "query_cost": "5.60"
    },
    "table": {
      "table_name": "t1",
      "access_type": "ref",
      "possible_keys": [
        "i1"
      ],
      "key": "i1",
      "used_key_parts": [
        "i1"
      ],
      "key_length": "5",
      "ref": [
        "const"
      ],
      "rows_examined_per_scan": 4,
      "rows_produced_per_join": 0,
      "filtered": "10.00",
      "cost_info": {
        "read_cost": "4.00",
        "eval_cost": "0.16",
        "prefix_cost": "5.60",
        "data_read_per_join": "6"
      },
      "used_columns": [
        "i1",
        "i3"
      ],
      "attached_condition": "(`test`.`t1`.`i3` = 1)"
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`t1`.`i3` AS `i3` from `test`.`t1` where ((`test`.`t1`.`i3` = 1) and (`test`.`t1`.`i1` = 1))
UPDATE mysql.server_cost
SET cost_value=DEFAULT;
UPDATE mysql.engine_cost
SET cost_value=DEFAULT;
FLUSH OPTIMIZER_COSTS;
DROP TABLE t1;
