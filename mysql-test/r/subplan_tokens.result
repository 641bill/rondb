CREATE TABLE t1 ( a INTEGER, KEY (a) );
INSERT INTO t1 VALUES (1),(2),(3);
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SET DEBUG='+d,subplan_tokens';
EXPLAIN FORMAT=tree SELECT * FROM t1;
EXPLAIN
-> [0x383f9723be72015d] Table scan on t1  (cost=0.08..0.25 rows=3)

To force this plan, use:
SET DEBUG='+d,subplan_tokens,force_subplan_0x383f9723be72015d';

EXPLAIN FORMAT=tree SELECT * FROM t1 ORDER BY a;
EXPLAIN
-> [0x4f56594d4fd521c9] Index scan on t1 using a  (cost=0.08..0.25 rows=3)

To force this plan, use:
SET DEBUG='+d,subplan_tokens,force_subplan_0x4f56594d4fd521c9';

SET DEBUG='+d,subplan_tokens,force_subplan_0x383f9723be72015d';
EXPLAIN FORMAT=tree SELECT * FROM t1 ORDER BY a;
EXPLAIN
-> [0x685afbd3f088dc87] Sort: t1.a  (cost=1.03..1.03 rows=3)
    -> [0x383f9723be72015d] Table scan on t1  (cost=0.08..0.25 rows=3)

To force this plan, use:
SET DEBUG='+d,subplan_tokens,force_subplan_0x685afbd3f088dc87,force_subplan_0x383f9723be72015d';

SET DEBUG='+d,subplan_tokens,force_subplan_0x90b6f02248424220';
EXPLAIN FORMAT=tree SELECT * FROM t1 JOIN t1 AS t2 ON t1.a=t2.a ORDER BY t1.a;
EXPLAIN
-> [0x9fe1924c5f48742c] Sort: t1.a  (cost=2.09..2.09 rows=3)
    -> [0x90b6f02248424220] Inner hash join (t1.a = t2.a)  (cost=0.80..1.31 rows=3)
        -> [0x383f9723be72015d] Table scan on t1  (cost=0.08..0.25 rows=3)
        -> Hash
            -> [0xedd60db81c76aaf5] Table scan on t2  (cost=0.08..0.25 rows=3)

To force this plan, use:
SET DEBUG='+d,subplan_tokens,force_subplan_0x9fe1924c5f48742c,force_subplan_0x90b6f02248424220,force_subplan_0x383f9723be72015d,force_subplan_0xedd60db81c76aaf5';

SET DEBUG='-d,subplan_tokens';
EXPLAIN FORMAT=tree SELECT * FROM t1 JOIN t1 AS t2 ON t1.a=t2.a ORDER BY t1.a;
EXPLAIN
-> Nested loop inner join  (cost=0.33..1.00 rows=3)
    -> Index scan on t2 using a  (cost=0.08..0.25 rows=3)
    -> Index lookup on t1 using a (a=t2.a)  (cost=0.25..0.25 rows=1)

DROP TABLE t1;
