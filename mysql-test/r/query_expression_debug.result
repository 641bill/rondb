#
# Bug#33909696 WL#11350 Streaming doesn't happen, when UNION All used at top level
#
CREATE TABLE t(a INT);
CREATE TABLE t1(a INT);
CREATE TABLE r(a INT);
EXPLAIN FORMAT = tree
(SELECT * FROM t UNION SELECT * FROM t1)  UNION ALL (SELECT * FROM r);
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on t  (rows=1)
                -> Table scan on t1  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM t UNION SELECT * FROM t1)  UNION ALL SELECT * FROM r
UNION ALL SELECT * FROM t;
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on t  (rows=1)
                -> Table scan on t1  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM t UNION SELECT * FROM t1)  UNION ALL SELECT * FROM r
UNION DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=4)
    -> Union materialize with deduplication  (rows=4)
        -> Table scan on t  (rows=1)
        -> Table scan on t1  (rows=1)
        -> Table scan on r  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM t UNION SELECT * FROM t1)  UNION ALL SELECT * FROM r
UNION ALL (SELECT * FROM t UNION DISTINCT SELECT * FROM r);
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on t  (rows=1)
                -> Table scan on t1  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)
    -> Stream results  (rows=2)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on t  (rows=1)
                -> Table scan on r  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM t UNION SELECT * FROM t1)  UNION ALL SELECT * FROM r
UNION ALL (SELECT * FROM t UNION ALL SELECT * FROM r);
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on t  (rows=1)
                -> Table scan on t1  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on t  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)

DROP TABLE t, t1, r;
CREATE TABLE r(a INT);
CREATE TABLE s(a INT);
CREATE TABLE t(a INT);
SELECT * FROM r INTERSECT SELECT * FROM s;
ERROR 42000: This version of MySQL doesn't yet support 'INTERSECT'
SELECT * FROM r EXCEPT SELECT * FROM s;
ERROR 42000: This version of MySQL doesn't yet support 'EXCEPT'
SET SESSION debug_enable_extended_set_ops=true;
# [NEW]
# Test operator precedence
EXPLAIN FORMAT = tree
(SELECT * FROM r UNION ALL SELECT * FROM s) INTERSECT ALL SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize  (rows=3)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r UNION ALL SELECT * FROM s INTERSECT ALL SELECT * FROM t;
EXPLAIN
-> Append
    -> Stream results  (rows=1)
        -> Table scan on r  (rows=1)
    -> Stream results  (rows=2)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT ALL SELECT * FROM s) INTERSECT ALL SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT ALL SELECT * FROM s INTERSECT ALL SELECT * FROM t;
EXPLAIN
-> Table scan on <except temporary>  (rows=3)
    -> Union materialize  (rows=3)
        -> Table scan on r  (rows=1)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT ALL SELECT * FROM s) UNION ALL SELECT * FROM t;
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT ALL SELECT * FROM s UNION ALL SELECT * FROM t;
EXPLAIN
-> Append
    -> Stream results  (rows=2)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
    -> Stream results  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r UNION DISTINCT SELECT * FROM s) INTERSECT DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r UNION DISTINCT SELECT * FROM s INTERSECT DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on r  (rows=1)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) INTERSECT DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s INTERSECT DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <except temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on r  (rows=1)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s UNION DISTINCT SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r UNION SELECT * FROM s) INTERSECT SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <union temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r UNION SELECT * FROM s INTERSECT SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on r  (rows=1)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT SELECT * FROM s) INTERSECT SELECT * FROM t;
EXPLAIN
-> Table scan on <intersect temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT SELECT * FROM s INTERSECT SELECT * FROM t;
EXPLAIN
-> Table scan on <except temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on r  (rows=1)
        -> Table scan on <intersect temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on s  (rows=1)
                -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT SELECT * FROM s) UNION SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT SELECT * FROM s UNION SELECT * FROM t;
EXPLAIN
-> Table scan on <union temporary>  (rows=3)
    -> Union materialize with deduplication  (rows=3)
        -> Table scan on <except temporary>  (rows=2)
            -> Union materialize with deduplication  (rows=2)
                -> Table scan on r  (rows=1)
                -> Table scan on s  (rows=1)
        -> Table scan on t  (rows=1)

#
# Bug#33905918 Server crashes after using explain of a query with except/intersect.
#
EXPLAIN SELECT * FROM r UNION ALL SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	UNION	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` union all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN SELECT * FROM r EXCEPT ALL SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	EXCEPT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN SELECT * FROM r INTERSECT ALL SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	INTERSECT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	INTERSECT RESULT	<intersect1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` intersect all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN SELECT * FROM r UNION DISTINCT SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	UNION	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	UNION RESULT	<union1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` union /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	EXCEPT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN SELECT * FROM r INTERSECT DISTINCT SELECT * FROM s;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	INTERSECT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
3	INTERSECT RESULT	<intersect1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` intersect /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r UNION ALL SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "union_result": {
      "using_temporary_table": false,
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` union all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r EXCEPT ALL SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "except_result": {
      "using_temporary_table": true,
      "select_id": 3,
      "table_name": "<except1,2>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r INTERSECT ALL SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "intersect_result": {
      "using_temporary_table": true,
      "select_id": 3,
      "table_name": "<intersect1,2>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` intersect all /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r UNION DISTINCT SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "union_result": {
      "using_temporary_table": true,
      "select_id": 3,
      "table_name": "<union1,2>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` union /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "except_result": {
      "using_temporary_table": true,
      "select_id": 3,
      "table_name": "<except1,2>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN FORMAT = json SELECT * FROM r INTERSECT DISTINCT SELECT * FROM s;
EXPLAIN
{
  "query_block": {
    "intersect_result": {
      "using_temporary_table": true,
      "select_id": 3,
      "table_name": "<intersect1,2>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 1,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "r",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 2,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "s",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` intersect /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`
EXPLAIN (SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t;
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	EXCEPT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
4	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
3	UNION	t	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
5	UNION RESULT	<union4,3>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	(/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`) union /* select#3 */ select `test`.`t`.`a` AS `a` from `test`.`t`
EXPLAIN (SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT
(SELECT * FROM t INTERSECT DISTINCT SELECT * FROM t);
id	select_type	table	partitions	type	possible_keys	key	key_len	ref	rows	filtered	Extra
1	PRIMARY	r	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
2	EXCEPT	s	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
5	EXCEPT RESULT	<except1,2>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
3	PRIMARY	t	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
4	INTERSECT	t	NULL	ALL	NULL	NULL	NULL	NULL	1	100.00	NULL
6	INTERSECT RESULT	<intersect3,4>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
7	UNION RESULT	<union5,6>	NULL	ALL	NULL	NULL	NULL	NULL	NULL	NULL	Using temporary
Warnings:
Note	1003	(/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`) union (/* select#3 */ select `test`.`t`.`a` AS `a` from `test`.`t` intersect /* select#4 */ select `test`.`t`.`a` AS `a` from `test`.`t`)
EXPLAIN FORMAT = json
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t;
EXPLAIN
{
  "query_block": {
    "union_result": {
      "using_temporary_table": true,
      "select_id": 5,
      "table_name": "<union4,3>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "except_result": {
            "using_temporary_table": true,
            "select_id": 4,
            "table_name": "<except1,2>",
            "access_type": "ALL",
            "query_specifications": [
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 1,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "r",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              },
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 2,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "s",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "dependent": false,
          "cacheable": true,
          "query_block": {
            "select_id": 3,
            "cost_info": {
              "query_cost": "0.35"
            },
            "table": {
              "table_name": "t",
              "access_type": "ALL",
              "rows_examined_per_scan": 1,
              "rows_produced_per_join": 1,
              "filtered": "100.00",
              "cost_info": {
                "read_cost": "0.25",
                "eval_cost": "0.10",
                "prefix_cost": "0.35",
                "data_read_per_join": "8"
              },
              "used_columns": [
                "a"
              ]
            }
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	(/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`) union /* select#3 */ select `test`.`t`.`a` AS `a` from `test`.`t`
EXPLAIN FORMAT = json
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT
(SELECT * FROM t INTERSECT DISTINCT SELECT * FROM t);
EXPLAIN
{
  "query_block": {
    "union_result": {
      "using_temporary_table": true,
      "select_id": 7,
      "table_name": "<union5,6>",
      "access_type": "ALL",
      "query_specifications": [
        {
          "except_result": {
            "using_temporary_table": true,
            "select_id": 5,
            "table_name": "<except1,2>",
            "access_type": "ALL",
            "query_specifications": [
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 1,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "r",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              },
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 2,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "s",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "intersect_result": {
            "using_temporary_table": true,
            "select_id": 6,
            "table_name": "<intersect3,4>",
            "access_type": "ALL",
            "query_specifications": [
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 3,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "t",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              },
              {
                "dependent": false,
                "cacheable": true,
                "query_block": {
                  "select_id": 4,
                  "cost_info": {
                    "query_cost": "0.35"
                  },
                  "table": {
                    "table_name": "t",
                    "access_type": "ALL",
                    "rows_examined_per_scan": 1,
                    "rows_produced_per_join": 1,
                    "filtered": "100.00",
                    "cost_info": {
                      "read_cost": "0.25",
                      "eval_cost": "0.10",
                      "prefix_cost": "0.35",
                      "data_read_per_join": "8"
                    },
                    "used_columns": [
                      "a"
                    ]
                  }
                }
              }
            ]
          }
        }
      ]
    }
  }
}
Warnings:
Note	1003	(/* select#1 */ select `test`.`r`.`a` AS `a` from `test`.`r` except /* select#2 */ select `test`.`s`.`a` AS `a` from `test`.`s`) union (/* select#3 */ select `test`.`t`.`a` AS `a` from `test`.`t` intersect /* select#4 */ select `test`.`t`.`a` AS `a` from `test`.`t`)
DROP TABLE r, s, t;
#
# Check that more set ops don't interfere with
# WITH RECURSIVE
#
WITH RECURSIVE qn AS
(SELECT 1 AS n, 1 AS un, 1 AS unp1 EXCEPT ALL
SELECT 1+n, unp1, un+unp1 FROM qn WHERE n<10)
SELECT * FROM qn;
ERROR HY000: Recursive Common Table Expression 'qn' should contain a UNION
WITH RECURSIVE qn AS
(SELECT 1 AS n, 1 AS un, 1 AS unp1 INTERSECT ALL
SELECT 1+n, unp1, un+unp1 FROM qn WHERE n<10)
SELECT * FROM qn;
ERROR HY000: Recursive Common Table Expression 'qn' should contain a UNION
CREATE TABLE t(n int, un INT, unp1 INT);
INSERT INTO t VALUES (1, 1, 1);
Non-union set op in seed works
WITH RECURSIVE qn AS
( SELECT * FROM t INTERSECT
VALUES ROW(1, 1, 1) UNION ALL
SELECT 1+n, unp1, un+unp1 FROM qn WHERE n<10)
SELECT * FROM qn;
n	un	unp1
1	1	1
2	1	2
3	2	3
4	3	5
5	5	8
6	8	13
7	13	21
8	21	34
9	34	55
10	55	89
WITH RECURSIVE qn AS
( SELECT * FROM t UNION ALL
(SELECT 1,1,1 INTERSECT SELECT 1+n, unp1, un+unp1 FROM qn WHERE n < 20)) SELECT * FROM qn;
ERROR HY000: Recursive table reference in EXCEPT or INTERSECT operand is not allowed.
WITH RECURSIVE qn AS
( SELECT * FROM t UNION ALL
(SELECT 1+n, unp1, un+unp1 FROM qn WHERE n<10 INTERSECT SELECT 1,1,1)) SELECT * FROM qn;
ERROR HY000: Recursive table reference in EXCEPT or INTERSECT operand is not allowed.
DROP TABLE t;
SET SESSION debug_enable_extended_set_ops=default;
