-- source include/no_valgrind_without_big.inc
-- source include/mysql_upgrade_preparation.inc

#
# Basic test that we can run mysql_upgrde and that it finds the
# expected binaries it uses.
#
--echo Run mysql_upgrade once
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1

# It should have created a file in the MySQL Servers datadir
let $MYSQLD_DATADIR= `select @@datadir`;
file_exists $MYSQLD_DATADIR/mysql_upgrade_info;

--echo Run it again - should say already completed
--replace_result $MYSQL_SERVER_VERSION VERSION
--error 2
--exec $MYSQL_UPGRADE --skip-verbose 2>&1

# It should have created a file in the MySQL Servers datadir
file_exists $MYSQLD_DATADIR/mysql_upgrade_info;

--echo Force should run it regardless of wether it's been run before
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1

# It should have created a file in the MySQL Servers datadir
file_exists $MYSQLD_DATADIR/mysql_upgrade_info;


#
# Bug #25452 mysql_upgrade access denied.
#

# Password protect a root account and run mysql_upgrade

CREATE USER mysqltest1@'%' IDENTIFIED by 'sakila';
GRANT ALL ON *.* TO mysqltest1@'%';
--echo Run mysql_upgrade with password protected account
--exec $MYSQL_UPGRADE --skip-verbose --force --user=mysqltest1 --password=sakila 2>&1

DROP USER mysqltest1@'%';


#
# Bug #26639 mysql_upgrade exits successfully even if external command failed
#

--echo Run mysql_upgrade with a non existing server socket
--replace_result $MYSQLTEST_VARDIR var
--replace_regex /.*mysqlcheck.*: Got/mysqlcheck: Got/ /\([0-9]*\)/(errno)/
--error 11
# NC: Added --skip-version-check, as the version check would fail when
# mysql_upgrade tries to get the server version.
--exec $MYSQL_UPGRADE --skip-verbose --force --host=not_existing_host --skip-version-check 2>&1

#
# Bug #28401 mysql_upgrade Failed with STRICT_ALL_TABLES, ANSI_QUOTES and NO_ZERO_DATE
#

# The SQL commands used by mysql_upgrade are written to be run
# with sql_mode set to '' - thus the scripts should change sql_mode
# for the session to make sure the SQL is legal.

# Test by setting sql_mode before running mysql_upgrade
set GLOBAL sql_mode='STRICT_ALL_TABLES,ANSI_QUOTES';
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1
eval set GLOBAL sql_mode=default;

--echo #
--echo # Bug #41569 mysql_upgrade (ver 5.1) add 3 fields to mysql.proc table
--echo # but does not set values.
--echo #

# Create a stored procedure and set the fields in question to null.
# When running mysql_upgrade, a warning should be written.

CREATE PROCEDURE testproc() BEGIN END;
UPDATE mysql.proc SET character_set_client = NULL WHERE name LIKE 'testproc';
UPDATE mysql.proc SET collation_connection = NULL WHERE name LIKE 'testproc';
UPDATE mysql.proc SET db_collation = NULL WHERE name LIKE 'testproc';
--exec $MYSQL_UPGRADE --skip-verbose --force 2> $MYSQLTEST_VARDIR/tmp/41569.txt
CALL testproc();
DROP PROCEDURE testproc;
--cat_file $MYSQLTEST_VARDIR/tmp/41569.txt
--remove_file $MYSQLTEST_VARDIR/tmp/41569.txt


--echo #
--echo # Bug #53613: mysql_upgrade incorrectly revokes
--echo #   TRIGGER privilege on given table
--echo #

SET @orig_sql_mode= @@sql_mode;
SET sql_mode= (SELECT replace(@@sql_mode,'NO_AUTO_CREATE_USER',''));
GRANT USAGE ON *.* TO 'user3'@'%';
SET sql_mode= @orig_sql_mode;
GRANT ALL PRIVILEGES ON `roelt`.`test2` TO 'user3'@'%';
--echo Run mysql_upgrade with all privileges on a user
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1
SHOW GRANTS FOR 'user3'@'%';

DROP USER 'user3'@'%';

--echo End of 5.1 tests


#
# Test the --upgrade-system-tables option
#
--replace_result $MYSQLTEST_VARDIR var
--exec $MYSQL_UPGRADE --skip-verbose --force --upgrade-system-tables

--echo #
--echo # Bug#12688860 : SECURITY RECOMMENDATION: PASSWORDS ON CLI
--echo #
--exec $MYSQL_UPGRADE -uroot --password= --skip-verbose --force 2>&1


--echo #
--echo # Bug#11827359 60223: MYSQL_UPGRADE PROBLEM WITH OPTION
--echo #                     SKIP-WRITE-BINLOG
--echo #

let $MYSQLD_DATADIR= `select @@datadir`;

--echo # Droping the previously created mysql_upgrade_info file..
--remove_file $MYSQLD_DATADIR/mysql_upgrade_info

--echo # Running mysql_upgrade with --skip-write-binlog..
--replace_result $MYSQLTEST_VARDIR var
--exec $MYSQL_UPGRADE --skip-verbose --skip-write-binlog

# mysql_upgrade must have created mysql_upgrade_info file,
# so the following command should never fail.
--remove_file $MYSQLD_DATADIR/mysql_upgrade_info

--echo # Running mysql_upgrade with --write-binlog..
--replace_result $MYSQLTEST_VARDIR var
--exec $MYSQL_UPGRADE --skip-verbose --write-binlog

--echo # Running mysql_upgrade with --max-allowed-packet=4096..
--exec $MYSQL_UPGRADE --max-allowed-packet=4096 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --max-allowed-packet=2147483648..
--exec $MYSQL_UPGRADE --max-allowed-packet=2147483648 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --max-allowed-packet=4095..
--exec $MYSQL_UPGRADE --max-allowed-packet=4095 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --max-allowed-packet=1000..
--exec $MYSQL_UPGRADE --max-allowed-packet=1000 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --max-allowed-packet=2147483649..
--exec $MYSQL_UPGRADE --max-allowed-packet=2147483649 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --max-allowed-packet=21474836480..
--exec $MYSQL_UPGRADE --max-allowed-packet=2147484652 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=4096..
--exec $MYSQL_UPGRADE --net-buffer-length=4096 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=16777216..
--exec $MYSQL_UPGRADE --net-buffer-length=16777216 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=4095..
--exec $MYSQL_UPGRADE --net-buffer-length=4095 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=1024..
--exec $MYSQL_UPGRADE --net-buffer-length=1024 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=16777217..
--exec $MYSQL_UPGRADE --net-buffer-length=16777217 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --net-buffer-length=167772160..
--exec $MYSQL_UPGRADE --net-buffer-length=167772160 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --bind-address..
--exec $MYSQL_UPGRADE --bind-address=127.0.0.1 --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with -C option..
--exec $MYSQL_UPGRADE -C --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --compress..
--exec $MYSQL_UPGRADE --compress --skip-verbose --force 2>&1

--echo # Running mysql_upgrade with --verbose..
--exec $MYSQL_UPGRADE --verbose --force 2>&1

--echo # Running mysql_upgrade with --protocol..
--exec $MYSQL_UPGRADE --protocol=TCP --skip-verbose --force 2>&1

--echo # Test positional arguments
--exec $MYSQL_UPGRADE --force --skip-verbose not_used_positional_argument 2>&1

--echo #
--echo # WL#7010: Remove unused --basedir and --datadir options
--echo #   from mysql_upgrade
--echo #

--echo Run mysql_upgrade with --datadir : should fail
--replace_regex /.*mysql_upgrade.*: unk/mysql_upgrade: unk/
--error 7
--exec $MYSQL_UPGRADE --skip-verbose --force --datadir=somedir 2>&1

--echo Run mysql_upgrade with --basedir : should fail
--replace_regex /.*mysql_upgrade.*: unk/mysql_upgrade: unk/
--error 7
--exec $MYSQL_UPGRADE --skip-verbose --force --basedir=somedir 2>&1

--echo # Running mysql_upgrade with invalid/incorrect options
--error 2
--exec $MYSQL_UPGRADE -c --force 2>&1

--error 2
--exec $MYSQL_UPGRADE -t --force 2>&1

--error 1
--exec $MYSQL_UPGRADE --protocol=AAA --force 2>&1


--echo #
--echo # Bug #19011337: UPGRADE TO 5.7 DISABLES USER ACCOUNTS
--echo #

CREATE USER B19011337@localhost IDENTIFIED BY 'test';
GRANT ALL PRIVILEGES on *.* TO B19011337@localhost;
UPDATE mysql.user SET plugin='' WHERE user='B19011337';

call mtr.add_suppression("Some of the user accounts with SUPER");
call mtr.add_suppression("1. Stop");
call mtr.add_suppression("2. Run");
call mtr.add_suppression("3. Restart");
call mtr.add_suppression("For complete");
call mtr.add_suppression("User entry .B19011337");

--echo # expect a warning in the error log
FLUSH PRIVILEGES;

--echo # let's check for the presense of the warning
let server_log= $MYSQLTEST_VARDIR/log/mysqld.1.err;
# $server_log has to be processed by include/search_pattern_in_file.inc which
# contains Perl code requiring that the environment variable SEARCH_FILE points
# to this file.
let SEARCH_FILE= $server_log;

--let SEARCH_PATTERN= 1. Stop
--source include/search_pattern_in_file.inc

--let SEARCH_PATTERN= 2. Run
--source include/search_pattern_in_file.inc

--let SEARCH_PATTERN= 3. Restart
--source include/search_pattern_in_file.inc

--let SEARCH_PATTERN= For complete instructions on how to upgrade MySQL
--source include/search_pattern_in_file.inc
--echo # end of check for the presense of the warning

--echo # repair the user's plugin
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1

--echo # expect non-empty
SELECT LENGTH(plugin) <> 0 FROM mysql.user WHERE user='B19011337';

--echo # cleanup
REVOKE ALL PRIVILEGES ON *.* FROM B19011337@localhost;
DROP USER B19011337@localhost;


--echo #
--echo # BUG#18985579: "CHECK TABLE .. FOR UPGRADE" FAILS TO REPORT
--echo #                OLD DATETIME FORMAT. 

let $MYSQLD_DATADIR= `select @@datadir`;
--copy_file std_data/55_temporal.frm $MYSQLD_DATADIR/test/t1.frm
--copy_file std_data/55_temporal.MYD $MYSQLD_DATADIR/test/t1.MYD
--copy_file std_data/55_temporal.MYI $MYSQLD_DATADIR/test/t1.MYI

--echo #Test case with 'avoid_temporal_upgrade' enabled.
SET @save_avoid_temporal_upgrade= @@global.avoid_temporal_upgrade;
SET GLOBAL avoid_temporal_upgrade= ON;

SELECT f_time, f_datetime, f_timestamp, HEX(WEIGHT_STRING(f_time)),
HEX(WEIGHT_STRING(f_datetime)), HEX(WEIGHT_STRING(f_timestamp)) FROM t1;

--echo #mysql_upgrade does not upgrade the old temporal types since
--echo #'avoid_temporal_upgrade' is enabled..
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1

SELECT f_time, f_datetime, f_timestamp, HEX(WEIGHT_STRING(f_time)),
HEX(WEIGHT_STRING(f_datetime)), HEX(WEIGHT_STRING(f_timestamp)) FROM t1;

SET @@global.avoid_temporal_upgrade= @save_avoid_temporal_upgrade;


--echo #Test case with 'avoid_temporal_upgrade' disabled.
SELECT f_time, f_datetime, f_timestamp, HEX(WEIGHT_STRING(f_time)),
HEX(WEIGHT_STRING(f_datetime)), HEX(WEIGHT_STRING(f_timestamp)) FROM t1;

--echo #mysql_upgrade upgrades the old temporal types.
--exec $MYSQL_UPGRADE --skip-verbose --force 2>&1

SELECT f_time, f_datetime, f_timestamp, HEX(WEIGHT_STRING(f_time)),
HEX(WEIGHT_STRING(f_datetime)), HEX(WEIGHT_STRING(f_timestamp)) FROM t1;

#Cleanup.
DROP TABLE t1;

--echo #
--echo # WL #8350 ENSURE 5.7 SUPPORTS SMOOTH LIVE UPGRADE FROM 5.6
--echo #

# Backup mysql.user table
CREATE TABLE backup_user AS SELECT * FROM mysql.user;

# Create 5.6 mysql.user table layout

--source include/user_57_to_56.inc

# Password for each user is 'lala'

call mtr.add_suppression("The plugin 'mysql_old_password' used to authenticate user 'user_old_pass_wp'@'%' is not loaded. Nobody can currently login using this account.");

--echo # Because su_old_pass_pn is a super user without plugin name but with pre 4.1
--echo # hash password we generate instruction on how one can proceed with
--echo # the upgrade using this account.
call mtr.add_suppression("Some of the user accounts with SUPER");
call mtr.add_suppression("1. Stop");
call mtr.add_suppression("2. Run");
call mtr.add_suppression("3. Restart");
call mtr.add_suppression("For complete");

INSERT INTO mysql.user VALUES
('%','user_old_pass_wp','0f0ea7602c473904','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','','','','',0,0,0,0,'mysql_old_password','','N');
INSERT INTO mysql.user VALUES
('%','user_old_pass_pn','0f0ea7602c473904','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','','','','',0,0,0,0,'','','N'),
('%','su_old_pass_pn','0f0ea7602c473904','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','','N'),
('%','user_nat_pass_pn','*46ABF58B20022A84DF7B2E8B1AC8219C8DA71553','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','','','','',0,0,0,0,NULL,'','N'),
('%','user_nat_pass_wp','*46ABF58B20022A84DF7B2E8B1AC8219C8DA71553','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','N','','','','',0,0,0,0,'mysql_native_password','','N');

FLUSH PRIVILEGES;

--echo #Connect using root account - should succeed
connect (con0,localhost,root,,);

--echo #Connecting user with pre 4.1 hash and empty plugin- should fail
--replace_result $MASTER_MYSOCK MASTER_SOCKET $MASTER_MYPORT MASTER_PORT
--error ER_ACCESS_DENIED_ERROR
connect (con1,localhost,user_old_pass_pn,lala,);

--echo #Connecting user with pre 4.1 hash and mysql_old_password plugin set -
--echo #should fail - the mysql_old_password was removed in 5.7
--replace_result $MASTER_MYSOCK MASTER_SOCKET $MASTER_MYPORT MASTER_PORT
--error ER_PLUGIN_IS_NOT_LOADED
connect (con2,localhost,user_old_pass_wp,lala,);

--echo #Connecting user with 4.1 hash and empty plugin - should succeed
connect (con3,localhost,user_nat_pass_pn,lala,);

--echo #Connecting user with 4.1 hash and mysql_native_plugin plugin set -
--echo #should succeed
connect (con4,localhost,user_nat_pass_wp,lala,);

connection con3;
--echo #Trying to do select on mysql.user table - should fail as
--echo #user_nat_pass_pn is not a super user
--error ER_TABLEACCESS_DENIED_ERROR
SELECT * FROM mysql.user WHERE user="user_nat_pass_pn";

--echo #Try granting all privileges on mysql db to user_nat_pass_pn using root
--echo #account - this should succeed as we are accessing mysql.db table which
--echo #has the same layout in 5.6 and 5.7
connection con0;
GRANT ALL PRIVILEGES ON mysql.* TO 'user_nat_pass_pn'@'%' WITH GRANT OPTION;

connection con3;
--echo #Select on mysql.user should be possible - we have select privileges on
--echo #mysql database
SELECT * FROM mysql.user WHERE user="user_nat_pass_pn";

--echo #Revoke all privileges from 'user_nat_pass_pn'@'%'
connection con0;
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'user_nat_pass_pn'@'%';

connection con3;
--echo #Trying to do select on mysql.user table - should fail as
--echo #user_nat_pass_pn's prvileleges on mysql db were revoked
--error ER_TABLEACCESS_DENIED_ERROR
SELECT * FROM mysql.user WHERE user="user_nat_pass_pn";

connection con0;
--echo #All alter user commands are now dangerous to use. Alter user command
--echo #uses mapping from 5.7 while working on 5.6 database. For instance
--echo #setting password expire will cause 'Y' to get assigned to
--echo #authentication_string column instead of password_expired column!!
SELECT authentication_string FROM mysql.user where user='user_nat_pass_pn';
SELECT password_expired FROM mysql.user where user='user_nat_pass_pn';

ALTER USER 'user_nat_pass_pn'@'%' PASSWORD EXPIRE;

SELECT authentication_string FROM mysql.user WHERE user='user_nat_pass_pn';
SELECT password_expired FROM mysql.user WHERE user='user_nat_pass_pn';

--echo #Fix authentication string
UPDATE mysql.user SET authentication_string='' WHERE user='user_nat_pass_pn';

--echo #"Manualy" grant super user privileges to user_nat_pass_pn, note we are
--echo #now updating mysql_user to get all privileges on *.*
connection con0;

UPDATE mysql.user SET Select_priv='Y', Insert_priv='Y', Update_priv='Y', Delete_priv='Y', Create_priv='Y', Drop_priv='Y', Reload_priv='Y', Shutdown_priv='Y', Process_priv='Y', File_priv='Y', Grant_priv='Y', References_priv='Y', Index_priv='Y', Alter_priv='Y', Show_db_priv='Y', Super_priv='Y', Create_tmp_table_priv='Y', Lock_tables_priv='Y', Execute_priv='Y', Repl_slave_priv='Y', Repl_client_priv='Y', Create_view_priv='Y', Show_view_priv='Y', Create_routine_priv='Y', Alter_routine_priv='Y', Create_user_priv='Y', Event_priv='Y', Trigger_priv='Y', Create_tablespace_priv='Y' where user="user_nat_pass_pn";

FLUSH PRIVILEGES;

#connection con3;
--echo #Select on mysql.user should now be possible
SELECT * FROM mysql.user WHERE user="user_nat_pass_pn";

connection default;

--echo #Run mysql_upgrade with user_nat_pass_pn - i.e. user with empty plugin
--echo #column and 4.1 hash password. After mysql_upgrade finishes the
--echo #mysql.user table should have 5.7 layout thus no need to restore the
--echo #dropped columns from the begining of the test
--exec $MYSQL_UPGRADE --skip-verbose --force --user=user_nat_pass_pn --password=lala 2>&1

disconnect con0;
disconnect con3;
disconnect con4;

--echo #Restart the server
--source include/restart_mysqld.inc

--echo #After the update all acl commands should be working fine. Trying out
--echo #some of them

ALTER USER 'user_nat_pass_pn'@'%' PASSWORD EXPIRE;
SELECT password_expired FROM mysql.user WHERE user='user_nat_pass_pn';
SET PASSWORD FOR user_nat_pass_pn@'%' = 'lala';
SELECT password_expired FROM mysql.user WHERE user='user_nat_pass_pn';

ALTER USER 'user_nat_pass_wp'@'%' ACCOUNT LOCK;
SELECT account_locked FROM mysql.user WHERE user='user_nat_pass_wp';
ALTER USER 'user_nat_pass_wp'@'%' ACCOUNT UNLOCK;
SELECT account_locked FROM mysql.user WHERE user='user_nat_pass_wp';

--echo #Connecting with user using mysql_old_password plugin should not be
--echo #possible
--replace_result $MASTER_MYSOCK MASTER_SOCKET $MASTER_MYPORT MASTER_PORT
--error ER_PLUGIN_IS_NOT_LOADED
connect (con5,localhost,user_old_pass_wp,lala,);

--echo #Creating super user and assigning all privileges to it. This updates
--echo #mysql.user table so should now be possible.
CREATE USER super@localhost IDENTIFIED BY 'lala';
GRANT ALL PRIVILEGES ON *.* TO super@localhost WITH GRANT OPTION;
SELECT user FROM mysql.user WHERE user='super';

# Cleanup

DROP USER 'super'@'localhost';
DROP USER 'user_old_pass_pn'@'%';
DROP USER 'su_old_pass_pn'@'%';
DROP USER 'user_old_pass_wp'@'%';
DROP USER 'user_nat_pass_pn'@'%';
DROP USER 'user_nat_pass_wp'@'%';

# Restore mysql.user content
TRUNCATE TABLE mysql.user;
INSERT INTO mysql.user SELECT * FROM backup_user;
DROP TABLE backup_user;

--source include/mysql_upgrade_cleanup.inc

--echo
--echo End of tests
