# ==== Purpose ====
#
# Verify that the "escape" function in the mysqltest language works as expected.
#
# ==== Requirements ====
#
# R1. escape(C,S) shall insert a backslash character before every occurrence
#     of C in S and return the resulting string.
# R2. escape(C,S) shall preserve leading and trailing whitespace in S.
# R3. escape(C,S) shall work when S contains parentheses, commas, or newlines.
# R4. escape(C,S) shall fail when C contains more than one character.

--echo ==== R1: escape inserts backslash before character ====

--let $x = foo bar baz
--let $y = escape(a,$x)
--assert($x == foo bar baz)
--assert($y == foo b\ar b\az)
--let $x = '"\f\o\o"'
--let $y = escape(\,$x)
--let $z = escape(",$y)
--let $w = escape(',$z)
--echo <$y>
--echo <$z>
--echo <$w>

--echo ==== R2: escape preserves leading and trailing whitespace ====

--let $x = escape(a, haha )
--echo <$x>

--let $s = `SELECT ' '`
--let $x = escape( , $s )
--echo <$x>

--echo ==== R3.1: escape shall work when string contains parentheses ====

--let $x = escape(h, hihi (haha))
--echo <$x>
--let $x = escape(), hihi (haha))
--echo <$x>
--let $x = escape((, hihi (haha))
--echo <$x>

--echo ==== R3.2: escape shall work when string contains comma ====

--let $x = escape(u,,x,)
--echo <$x>
--let $x = escape(,,,x,)
--echo <$x>

--echo ==== R3.3: escape shall work when string contains newline ====

let $x = escape(h,
hoho
huhu
);
--echo <$x>
let $x = escape(
,1
2
3);
--echo <$x>

--echo ==== R4: escape shall fail when C contains more than one character ====

--let $test_file = $MYSQL_TMP_DIR/escape_failure.test
--write_file $test_file
--let $x = escape(zzz,grizzzly)
EOF
--error 1
--exec $MYSQL_TEST < $test_file 2>&1
--remove_file $test_file
