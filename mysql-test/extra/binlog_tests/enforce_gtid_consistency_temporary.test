
--echo ---- [CREATE|DROP] TEMPORARY TABLE: violation cases ----

--let $error_code= ER_GTID_UNSAFE_CREATE_DROP_TEMPORARY_TABLE_IN_TRANSACTION
--let $error_message= Statement violates GTID consistency: CREATE TEMPORARY

--let $gtid_violation= 1

# When CREATE TEMPORARY or DROP TEMPORARY occurs in the middle of a
# transaction, it is a GTID-violation because these statements do not
# generate an implicit commit, but cannot be rolled back.  This is
# regardless of the storage engine.

# When the created table is myisam, it is considered a
# non-transactional statement, and therefore logged before the
# transaction ends, and thus anonymous ownership is released and the
# counters decreased.  Except when binlog_format=row: in that case
# CREATE TEMPORARY is not logged at all.  Therefore, the transaction
# context is left open, so it keeps anonymous ownership, and does not
# modify counter values.

--echo # CREATE TEMPORARY in trx (InnoDB, BEGIN): Violation.
--let $expect_counter_value= 1
--let $pre_statement= BEGIN
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
DROP TEMPORARY TABLE IF EXISTS t1;

--echo # CREATE TEMPORARY in trx (MyISAM, BEGIN): Violation.
--let $expect_counter_value= 0
--let $expect_counter_value_row= 1
--let $pre_statement= BEGIN
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
if (0){
if ($enforce_gtid_consistency == 0)
{
  if ($gtid_mode == 2)
  {
    if ($gtid_next == 'ANONYMOUS')
    {
      --exit
    }
  }
}
}
DROP TEMPORARY TABLE IF EXISTS t1;

--echo # CREATE TEMPORARY in trx (InnoDB, AUTOCOMMIT=0): Violation.
--let $expect_counter_value= 1
SET AUTOCOMMIT = 0;
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
SET AUTOCOMMIT = 1;
DROP TEMPORARY TABLE IF EXISTS t1;

--echo # CREATE TEMPORARY in trx (MyISAM, AUTOCOMMIT=0): Violation.
--let $expect_counter_value= 0
--let $expect_counter_value_row= 1
SET AUTOCOMMIT = 0;
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
SET AUTOCOMMIT = 1;
DROP TEMPORARY TABLE IF EXISTS t1;

--echo # DROP TEMPORARY in trx (InnoDB, BEGIN): Violation.
--let $expect_counter_value= 1
CREATE TEMPORARY TABLE IF NOT EXISTS t1 (a INT) ENGINE = InnoDB;
--let $pre_statement= BEGIN
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

--echo # DROP TEMPORARY in trx (MyISAM, BEGIN): Violation.
--let $expect_counter_value= 0
CREATE TEMPORARY TABLE IF NOT EXISTS t1 (a INT) ENGINE = MyISAM;
--let $pre_statement= BEGIN
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

--echo # DROP TEMPORARY in trx (InnoDB, AUTOCOMMIT=0): Violation.
--let $expect_counter_value= 1
CREATE TEMPORARY TABLE IF NOT EXISTS t1 (a INT) ENGINE = InnoDB;
SET AUTOCOMMIT = 0;
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
SET AUTOCOMMIT = 1;

--echo # DROP TEMPORARY in trx (MyISAM, AUTOCOMMIT=0): Violation.
--let $expect_counter_value= 0
CREATE TEMPORARY TABLE IF NOT EXISTS t1 (a INT) ENGINE = MyISAM;
SET AUTOCOMMIT = 0;
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
SET AUTOCOMMIT = 1;


DROP TEMPORARY TABLE IF EXISTS t1;


--echo ---- [CREATE|DROP] TEMPORARY TABLE: consistent cases ----

--let $gtid_violation= 0

# When CREATE TEMPORARY and DROP TEMPORARY occur *outside* a
# transaction, it is GTID-consistent.

--echo # CREATE TEMPORARY outside trx: Consistent.
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

--echo # DROP TEMPORARY outside trx: Consistent.
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

# ALTER is always GTID-consistent. In fact, ALTER TEMPORARY does not
# exist.  ALTER without the TEMPORARY keyword can operate on a
# temporary table, but even then it has an implicit commit.

--echo # ALTER without TEMPORARY, on temp table, in trx: Consistent, except if gtid_next=GTID, it generates ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET.
CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB;
--let $pre_statement= BEGIN
--let $statement= ALTER TABLE t1 ADD COLUMN (b INT)
if ($gtid_next == 'GTID')
{
  --let $error_code= ER_CANT_DO_IMPLICIT_COMMIT_IN_TRX_WHEN_GTID_NEXT_IS_SET
  --let $error_message= Cannot execute statements with implicit commit inside a transaction
  --let $gtid_violation= 1
}
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

# DROP without TEMPORARY is always GTID-consistent, since it has an
# implicit commit even if it operates on a temporary table.

--echo # DROP without TEMPORARY, on temp table: Consistent.
--let $pre_statement= BEGIN
--let $statement= DROP TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc

--let $gtid_violation= 0
DROP TABLE IF EXISTS t1; # May still exist if gtid_violation=1.

# When SQL_LOG_BIN=0, it is GTID-consistent since nothing is logged.

SET SQL_LOG_BIN = 0;

--echo # CREATE TEMPORARY in trx, SQL_LOG_BIN=0 (InnoDB, BEGIN): Consistent.
--let $pre_statement= BEGIN
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;
DROP TEMPORARY TABLE t1;

--echo # CREATE TEMPORARY in trx, SQL_LOG_BIN=0 (MyISAM, BEGIN): Consistent.
--let $pre_statement= BEGIN
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;
DROP TEMPORARY TABLE t1;

SET AUTOCOMMIT = 0;

--echo # CREATE TEMPORARY in trx, SQL_LOG_BIN=0 (InnoDB, AUTOCOMMIT=0): Consistent.
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;
DROP TEMPORARY TABLE t1;

--echo # CREATE TEMPORARY in trx, SQL_LOG_BIN=0 (MyISAM, AUTOCOMMIT=0): Consistent.
--let $statement= CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;
DROP TEMPORARY TABLE t1;

SET AUTOCOMMIT = 1;

--echo # DROP TEMPORARY in trx, SQL_LOG_BIN=0 (InnoDB, BEGIN): Consistent.
CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB;
--let $pre_statement= BEGIN
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;

--echo # DROP TEMPORARY in trx, SQL_LOG_BIN=0 (MyISAM, BEGIN): Consistent.
CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM;
--let $pre_statement= BEGIN
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;

SET AUTOCOMMIT = 0;

--echo # DROP TEMPORARY in trx, SQL_LOG_BIN=0 (InnoDB, AUTOCOMMIT=0): Consistent.
CREATE TEMPORARY TABLE t1 (a INT) ENGINE = InnoDB;
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;

--echo # DROP TEMPORARY in trx, SQL_LOG_BIN=0 (MyISAM, AUTOCOMMIT=0): Consistent.
CREATE TEMPORARY TABLE t1 (a INT) ENGINE = MyISAM;
--let $statement= DROP TEMPORARY TABLE t1
--source extra/binlog_tests/enforce_gtid_consistency_statement.inc
COMMIT;

SET AUTOCOMMIT = 1;

SET SQL_LOG_BIN = 1;
