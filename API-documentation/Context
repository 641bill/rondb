/*
 * Context is the "supertype" of Session and Batch.
 * It contains functions that are executed immediately
 * if called from a Session; or are executed when the Batch
 * is executed.
 * 
 * Users may find useful a "user" property of session and batch.
 * The mynode implementation will not ever define a property called "user".
 */

  /** mapClass()
   * Supply annotations to a prototype object.
   *
   * Annotations specify details of how the object is mapped to the database.
   * For allowable objectAnnotations, see the mapClass description
   * in Annotations.
   * 
   * @param token_object prototype object to annotate
   * @param annotations field annotations object 
   * @param callback function to call when mapping is complete and validated
   * @param other parameters are returned in the callback function
   * @return nothing
   */
  mapClass(Object token_object, Object objectAnnotations, function(err[, ...]) callback[, ...]);

  /** Get mappings for a table or class. 
   * IMMEDIATE
   * The result is a javascript
   * object that has the same form as the parameter for Annotations mapClass.
   * @param table the table name or object prototype of a mapped class
   * @return a TableMapping object or null if the table is not mapped
   */
  getMapping(Object table);

  /** Find a specific instance based on primary or unique key value.
   * A new object or null will always be provided in the callback.
   *
   * The parameter "mapping" is the property named mynode
   * for a mapped type. This property is added by the getSession()
   * connect() or connectSync() function based on the Annotations parameter.
   * Alternatively, the mapping parameter may be the String name of the
   * table in the database. If not already mapped, the table will be mapped
   * using the default mapping.
   * Alternatively, the mapping parameter may be the constructor function
   * of the mapped type.
   * 
   * The parameter "keys" may be of any type. Keys must uniquely identify
   * a single row in the database. If keys is a simple type
   * (number or string), then the parameter type must be the 
   * same type as or compatible with the primary key type of the mapped object.
   * Otherwise, properties are taken
   * from the parameter and matched against property names in the
   * mapping. Primary key properties will be used if all are present,
   * and other properties will be ignored. If keys cannot identify the 
   * primary key, property names corresponding to unique key columns
   * will be used. If no complete primary or unique key properties
   * are found, an error is reported.
   * The returned object will be loaded based on the mapping and the current
   * values in the database.
   * 
   * For multi-column primary or unique keys, all key fields must be set.
   * 
   * @param mapping the mapping between the database table and javascript object
   * @param keys the instance to find in the database
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object or null if not found
   * context: the context (either the Session or Batch object)
   * @return undefined
   */
  find(Object mapping, Object keys, Function(Object error, Object instance[, ...]) callback[, ...]);

  /** Load a specific instance by matching its primary or unique key with 
   * a database row. Load will never create a new domain object.
   * 
   * The parameter "instance" must have its primary or unique key value(s) set.
   * The mapped values in the object will be loaded based on the current
   * values in the database. Unmapped properties in the object will be unchanged.
   * 
   * Primary key properties will be used if all are present,
   * and all other properties will be ignored.
   * Otherwise, property names corresponding to unique key columns
   * will be used. If no complete primary or unique key properties
   * are found, an error is reported.
   * 
   * @param instance the instance to load from the database
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object
   * context: the context (either the Session or Batch object)
   * @return undefined
   */
  load(Object instance, Function(Object error, Object instance[, ...]) callback[, ...]);

  /** Insert the instance into the database.
   *
   * If the instance already exists in the database, an exception is 
   * reported in the callback.
   * 
   * For autogenerated values, the values will be present in the instance
   * when the callback is called.
   *
   * @param instance the instance to insert
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object
   * context: the context (either the Session or Batch object)
   * @return undefined
   * 
   */
  persist(Object instance, Function(Object error[, ...]) callback[, ...]);
    
  /** Delete an instance of a class from the database by its primary key.
   * Only the id field(s) is (are) used to determine which instance 
   * is to be deleted. If the instance does not exist in the database,
   * an error is reported in the callback.
   *
   * @param the instance to delete from the database
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object
   * context: the context (either the Session or Batch object)
   * @return undefined
   */
  remove(Object instance, Function(Object error[, ...]) callback[, ...]);

  /** Update the instance in the database without necessarily retrieving it.
   * The id field is used to determine which instance is to be updated.
   * If the instance does not exist in the database, an exception is reported
   * in the callback.
   * This method cannot be used to change the primary key.
   *
   * @param instance the instance to update
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object
   * context: the context (either the Session or Batch object)
   * @return undefined
   */
  update(Object instance, Function(Object error[, ...]) callback[, ...]);

    /** Save the instance in the database without checking for existence.
   * The id field is used to determine which instance is to be saved.
   * If the instance exists in the database it will be updated.
   * If the instance does not exist, it will be created.
   *
   * @param instance the instance to update
   * @param callback function to be called when operation has completed,with parameters:
   * err: the node.js Error object)
   * instance: the domain model object
   * context: the context (either the Session or Batch object)
   * @return undefined
   */
  save(Object instance, Function(Object error[, ...]) callback[, ...]);

    /** Is "this" a batch?
   * @return true if this context is a batch; false if this context is a session
   */
  isBatch();
