
/***
 * ConnectionProperties()
 * IMMEDIATE
 * CONSTRUCTOR
 *
 * This constructor returns a complete set of default connection
 * properties for "impl"
 *
 * @return The default set of connection properties for adapter "impl"
 */
ConnectionProperties(String impl);


/***
 * TableMapping()
 * IMMEDIATE
 * CONSTRUCTOR
 *
 * The TableMapping constructor is visible as a top-level function.
 * Refer to the TableMapping documentation for details.
 */
TableMapping(tableName_or_tableMapping);

 
/* 
 * connect()
 * ASYNC
 * 
 * Connect to the data source.  This is a "superheavyweight" call: 
 * it could involve connecting to many other nodes on the network,
 * waiting for them to become ready, and making multiple requests to them.
 *
 * It returns a SessionFactory in the callback function.
 * The "implementation" member of the properties object determines the 
 * implementation of the SessionFactory.
 *
 * If mappings is null, the schema for the needed tables are only read
 * when actually needed.
 * 
 * If mappings is not null, the schema for only the tables named
 * are read, and table mappings are checked for errors.
 *
 *  @param properties  properties object describing the session
 *  @param mappings    Table Mappings to validated when session is opened
 *  @param callback    function called after connection is complete.
 *  @return void
 */
connect(properties, mappings, Function(err, SessionFactory[, ...]) callback[, ...]);


/* 
 * openSession()
 * ASYNC
 * 
 * Connect to the data source and get a Session.  This is a "superheavyweight" call: 
 * it could involve connecting to many other nodes on the network,
 * waiting for them to become ready, and making multiple requests to them.
 *
 * This is a convenience method. It returns a Session in the callback function.
 * This is equivalent to calling connect and then getSession on the
 * SessionFactory that is returned in the callback function.
 *
 * The "implementation" member of the properties object determines the 
 * implementation of the Session
 *
 * If Annotations is null, the entire schema for the database is read
 * and stored internally for later use. This allows unlimited access
 * to all tables in the database.
 * 
 * If Annotations is not null, the schema for only the tables named
 * is read. Subsequent references to tables not described in Annotations
 * will return errors.
 *
 *  @param properties  properties object describing the session
 *  @param mappings    Table Mappings to validated when session is opened
 *  @param callback    function called after connection is complete.
 *  @async
 */
openSession(Properties, mappings, Function(err, Session[, ...]) callback[, ...]);


/** Get all SessionFactories that have been created by this module.
 * All session factories are returned in an array. 
 * @return open session factories
 */
getOpenSessionFactories();
