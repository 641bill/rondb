
/** Annotations provide the system with the user's guidance on the
 * mapping from the database to javascript domain objects.
 * Users can request that all tables in the database be mapped,
 * by setting the flag "MapAllTables".
 * Users can request that all columns in the table be mapped,
 * by setting the flag "mapAllColumns" for the table.
 * 
 * The Annotations methods are all immediate methods that simply describe 
 * mappings.  The actual work of validating annotations against a
 * data dictionary fetched from the server is deferred until later.
 * 
*/

/* Annotations object definitions */

  /** TableMapping object
   * A TableMapping describes the mapping of a domain object in the application
   * to a table stored in the database.
   * If the mapping is a default mapping, then each column is mapped to a field
   * of the same name.
   */
  TableMapping = {
    name                   :  "" ,  // Table name
    database               :  "" ,  // Database name
    autoIncrementBatchSize :  1  ,  // Auto-increment prefetch batch size
    isDefaultMapping       : true,  // This mapping is a default mapping
    fields                 : []     // array of FieldMapping objects
  };


  /** FieldMapping object
   *  Describes the mapping of each field in a domain object to a column
   *  in the database.
   * 
   *  actionOnNull describes the desired behavior when an object is written
   *               to the database and this field is Null.  One of:
   *               "NONE":    do not write this field to the database
   *               "ERROR":   raise an error condition to the application
   *               "DEFAULT": write the column's default value 
   *  
   *  column       Defaults to a column with the same name as the field.  
   */
  FieldMapping = {
    fieldName     :  ""     ,  // Name of the field in the domain object
    columnName    :  ""     ,  // Column name where this field is stored  
    columnNumber  :  0      ,  // Column number in table 
    actionOnNull  :  "NONE" ,  // One of NONE, ERROR, or DEFAULT
    notPersistent : false   , // Boolean TRUE if this field should *not* be stored
    converter     :  {}       // Converter class to use with this field  
  };


/* Annotations instance methods */
{

  /** Set strict mode. In strict mode, all property names must be valid and
   * have valid values. If a property is misspelled, an error is returned.
   *
   * @param flag default true.
   */
  strict(boolean flag);

  /** mapAllTables(boolean flag)
   * IMMEDIATE 
   * Request that all tables be mapped. If this method is not called, the
   * default is to map all tables.
   *
   * @param flag true to map all tables; false to map only tables specified
   * with mapClass().
   */
  mapAllTables(boolean flag);

  /** mapClass
   * IMMEDIATE 
   * Supply annotations to a prototype or token object.
   *
   * Annotations specify details of how the object is mapped to the database.
   * 
   * @param token_object prototype object to annotate
   * @param annotations annotations object
   */
  mapClass(Object token_object, TableMapping objectAnnotations);

  /** registerFieldConverter
   * IMMEDIATE
   * Register a converter for a field in a domain object
   *
   */
  registerFieldConverter(Object token_object, String field_name, Converter c);

  /** registerColumnConverter
   * IMMEDIATE
   * Register a converter for a column in a table
   *
   */
  registerColumnConverter(String table, String columnName, Converter c);

  /** registerTypeConverter 
   *  IMMEDIATE
   *  Register a converter for a SQL data type 
   *
   *  @param type is as defined in DBDictionary for the storage SPI
   */
  registerTypeConverter(string typeName, Converter c);

  /** registerCharsetConverter
   *  IMMEDIATE
   *  Register a converter to/from Javascript String for a SQL charset
   */
  registerCharsetConverter(String charsetName, Converter c);
}
