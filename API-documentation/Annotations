
/** Annotations provide the system with the user's guidance on the
 * mapping from the database to javascript domain objects.
 * Users can request that all tables in the database be mapped,
 * by setting the flag "MapAllTables".
 * Users can request that all columns in the table be mapped,
 * by setting the flag "mapAllColumns" for the table.
 * 
 * The Annotations methods are all immediate methods that simply describe 
 * mappings.  The actual work of validating annotations against a
 * data dictionary fetched from the server is deferred until later.
 * 
*/

/* Annotations instance methods */
{

  /** Set strict mode. In strict mode, all property names must be valid and
   * have valid values. If a property is misspelled, an error is returned.
   *
   * @param flag default true.
   */
  strict(boolean flag);

  /** mapAllTables(boolean flag)
   * IMMEDIATE 
   * Request that all tables be mapped. If this method is not called, the
   * default is to map all tables.
   *
   * @param flag true to map all tables; false to map only tables specified
   * with mapClass().
   */
  mapAllTables(boolean flag);

  /** mapClass
   * IMMEDIATE 
   * Supply annotations to a prototype or token object.
   *
   * Annotations specify details of how the object is mapped to the database.
   * The annotations object is a javascript object that contains optional
   * properties and defaults:
   *
   * "table"                  : ""   the name of the table in the base.
   * "schema"                 : ""   the name of the schema for the table
   * "database"               : ""   the name of the database for the table
   * "autoIncrementBatchSize" : 1    the batch size of the autoincrement
   * "mapAllColumns"          : true map all columns in this table
   *
   * Another property of the annotations object is named "field" or "fields".
   *
   * The field or fields property is either a field mapping object or an array,
   * each element of which is a field mapping. 
   * The field mapping object is a javascript object that contains
   * properties and defaults:
   *
   * "nullValue"     : "NONE" Behavior when this field contains a null value when
   *                      persisting the object.
   *                      One of "NONE", "EXCEPTION", or "DEFAULT"
   *
   * "column"        : "" Column name where this field is stored.  The default
   *                      is a column with the same name as the field.
   *
   * "notPersistent" : "" Specify that a field is not to be persisted in the
   *                      database.
   *
   * "converter"     : "" Specify the converter to use for this field.
   *                      The default is to use the converter based on the SQL type.
   * 
   * @param token_object prototype object to annotate
   * @param annotations annotations object
   */
  mapClass(Object token_object, Object objectAnnotations);

  /** registerFieldConverter
   * IMMEDIATE
   * Register a converter for a field in a domain object
   *
   */
  registerFieldConverter(Object token_object, String field_name, Converter c);

  /** registerColumnConverter
   * IMMEDIATE
   * Register a converter for a column in a table
   *
   */
  registerColumnConverter(String table, String column, Converter c);

  /** registerTypeConverter 
   *  IMMEDIATE
   *  Register a converter for a SQL data type 
   *
   *  @param type is as defined in DBDictionary for the storage SPI
   */
  registerTypeConverter(string typeName, Converter c);

  /** registerCharsetConverter
   *  IMMEDIATE
   *  Register a converter to/from Javascript String for a SQL charset
   */
  registerCharsetConverter(String charsetName, Converter c);
}
