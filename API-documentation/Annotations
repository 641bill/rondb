
/** Annotations provide the system with the user's guidance on the
 *  mapping from the database to javascript domain objects.
 * 
 *  The Annotations methods are all immediate methods that simply describe 
 *  mappings.  The actual work of validating annotations against a
 *  data dictionary fetched from the server is deferred until later.
 * 
*/

/* Annotations instance methods */

  /** newTableMapping(tableName) 
   * IMMEDIATE
   *
   * Create a new TableMapping for table tableName.
   * tableName may be a bare table name, or fully qualified "database.table".
   */
  newTableMapping(tableName);
  
  
  /** newFieldMapping(fieldName, [columnName])
   *  IMMEDIATE
   *
   *  Create a new FieldMapping for a field.  If columnName is not supplied,
   *  it defaults to be the same as fieldName.
   */
  newFieldMapping(fieldName, columnName);


  /** strict(boolean flag)
   *  IMMEDIATE
   * 
   *  Set strict mode. In strict mode, all property names must be valid and
   *  have valid values. If a property is misspelled, an error is returned.
   *
   *  @param flag default true.
   */
  strict(flag);


  /** mapAllTables(boolean flag)
   * IMMEDIATE 
   * 
   * Request that all tables be mapped. If this method is not called, the
   * default is to map all tables.
   *
   * @param flag true to map all tables; false to map only tables specified
   * with mapClass().
   */
  mapAllTables(flag);


  /** mapClass(Function constructorFunction, TableMapping tableMapping) 
   * IMMEDIATE 
   * 
   * Annotate a constructor with mapping metadata.
   *
   * mapClass() specifies that objects created from constructorFunction 
   * will be mapped to the database according to tableMapping.
   * 
   * After the mapClass() call, constructorFunction.prototype() will contain
   * a property called mynode,  
   *
   * 
   * @param constructorFunction prototype object to annotate
   * @param annotations annotations object
   */
  mapClass(constructorFunction, tableMapping);


  /** registerFieldConverter
   * IMMEDIATE
   * Register a converter for a field in a domain object
   *
   */
  registerFieldConverter(Object token_object, String field_name, Converter c);


  /** registerTypeConverter(string typeName, Converter converter)
   *  IMMEDIATE
   *  Register a converter for a SQL data type 
   *
   *  @param type is a column type as defined in TableMetadata
   */
  registerTypeConverter(string typeName, Converter c);
