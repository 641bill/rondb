/** Transactions are either automatic or explicit. If automatic,
  * (autocommit) every operation is performed as part of a new
  * transaction that is automatically committed.
  */

/** Begin a transaction.
 * IMMEDIATE
 * If a transaction is already active, an exception is thrown.
 * 
 */
begin();

/** Commit a transaction.
 *  ASYNC
 *
 * This function returns a promise.  On success, the promise will be fulfilled.  
 * The optional callback receives only an error value.  Any extra arguments 
 * passed after the callback function will be returned to the callback verbatim
 * following the error.
 * 
 * @param callback 
 */
commit([callback], [...] );


/** Roll back a transaction. 
 * ASYNC
 *
 * This function returns a promise.  On success, the promise will be fulfilled.
 * The optional callback receives only an error value.  Any extra arguments 
 * passed after the callback function will be returned to the callback verbatim
 * following the error.
 *
 *
 * @param callback 
 */
rollback([callback], [...] );


/** Is there a transaction currently active?
 * IMMEDIATE
 * @return true if a transaction is active
 */
boolean isActive();


/** Mark this transaction as rollback only. After this method is called,
 * commit() will roll back the transaction and throw an exception;
 * rollback() will roll back the transaction and not throw an exception.
 *
 * If in autocommit mode, an exception is thrown.
 * IMMEDIATE
 */
setRollbackOnly();


/** Has this transaction been marked for rollback only?
 * @return true if the transaction has been marked for rollback only
 * IMMEDIATE
 */
boolean getRollbackOnly();
