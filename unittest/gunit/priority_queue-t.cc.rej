--- unittest/gunit/priority_queue-t.cc
+++ unittest/gunit/priority_queue-t.cc
@@ -852,4 +852,24 @@
   test_min_k_elements(many_keys.begin(), many_keys.end(), 20);
 }
 
+/**
+  Bug#30301356 - SOME EVENTS ARE DELAYED AFTER DROPPING EVENT
+
+  Test that ensures heap property is not violated if we remove an
+  element from an interior node. In the below test, we remove the
+  element 90 at index 6 in the array. After 90 is removed, the
+  parent node's of the deleted node violates the heap property.
+  In order to restore the heap property, we need to move up the
+  heap until we reach a node which satisfies the heap property or
+  the root. Without the fix, we adjust the heap downwards.
+*/
+
+TEST_F(PriorityQueueTest, TestElementRemove) {
+  Priority_queue<int, std::vector<int>, My_greater> pq;
+
+  int keys[11] = {60, 65, 84, 75, 80, 85, 90, 95, 100, 105, 82};
+  pq = Priority_queue<int, std::vector<int>, My_greater>(keys, keys + 11);
+  pq.remove(6);
+  EXPECT_TRUE(pq.is_valid());
+}
 }  // namespace priority_queue_unittest
